// Code generated by gen/z80/opcodes/opcodes.go. DO NOT EDIT.

package z80

var opcodes = map[uint8]func(c *CPU){
	0x00: func(c *CPU) { nop() },
	0x01: func(c *CPU) { ld16(c, c.storeBC, c.loadImm16) },
	0x02: func(c *CPU) { ld(c, c.storeIndBC, c.loadA) },
	0x03: func(c *CPU) { inc16(c, c.storeBC, c.loadBC) },
	0x04: func(c *CPU) { inc(c, c.storeB, c.loadB) },
	0x05: func(c *CPU) { dec(c, c.storeB, c.loadB) },
	0x06: func(c *CPU) { ld(c, c.storeB, c.loadImm) },
	0x08: func(c *CPU) { ex(c, c.loadAF, c.storeAF, c.loadAF1, c.storeAF1) },
	0x09: func(c *CPU) { add16(c, c.storeHL, c.loadHL, c.loadBC) },
	0x0a: func(c *CPU) { ld(c, c.storeA, c.loadIndBC) },
	0x0b: func(c *CPU) { dec16(c, c.storeBC, c.loadBC) },
	0x0c: func(c *CPU) { inc(c, c.storeC, c.loadC) },
	0x0d: func(c *CPU) { dec(c, c.storeC, c.loadC) },
	0x0e: func(c *CPU) { ld(c, c.storeC, c.loadImm) },
	0x10: func(c *CPU) { djnz(c, c.loadImm) },
	0x11: func(c *CPU) { ld16(c, c.storeDE, c.loadImm16) },
	0x12: func(c *CPU) { ld(c, c.storeIndDE, c.loadA) },
	0x13: func(c *CPU) { inc16(c, c.storeDE, c.loadDE) },
	0x14: func(c *CPU) { inc(c, c.storeD, c.loadD) },
	0x15: func(c *CPU) { dec(c, c.storeD, c.loadD) },
	0x16: func(c *CPU) { ld(c, c.storeD, c.loadImm) },
	0x18: func(c *CPU) { jra(c, c.loadImm) },
	0x19: func(c *CPU) { add16(c, c.storeHL, c.loadHL, c.loadDE) },
	0x1a: func(c *CPU) { ld(c, c.storeA, c.loadIndDE) },
	0x1b: func(c *CPU) { dec16(c, c.storeDE, c.loadDE) },
	0x1c: func(c *CPU) { inc(c, c.storeE, c.loadE) },
	0x1d: func(c *CPU) { dec(c, c.storeE, c.loadE) },
	0x1e: func(c *CPU) { ld(c, c.storeE, c.loadImm) },
	0x20: func(c *CPU) { jr(c, FlagZ, false, c.loadImm) },
	0x21: func(c *CPU) { ld16(c, c.storeHL, c.loadImm16) },
	0x22: func(c *CPU) { ld16(c, c.store16IndImm, c.loadHL) },
	0x23: func(c *CPU) { inc16(c, c.storeHL, c.loadHL) },
	0x24: func(c *CPU) { inc(c, c.storeH, c.loadH) },
	0x25: func(c *CPU) { dec(c, c.storeH, c.loadH) },
	0x26: func(c *CPU) { ld(c, c.storeH, c.loadImm) },
	0x28: func(c *CPU) { jr(c, FlagZ, true, c.loadImm) },
	0x29: func(c *CPU) { add16(c, c.storeHL, c.loadHL, c.loadHL) },
	0x2a: func(c *CPU) { ld16(c, c.storeHL, c.load16IndImm) },
	0x2b: func(c *CPU) { dec16(c, c.storeHL, c.loadHL) },
	0x2c: func(c *CPU) { inc(c, c.storeL, c.loadL) },
	0x2d: func(c *CPU) { dec(c, c.storeL, c.loadL) },
	0x2e: func(c *CPU) { ld(c, c.storeL, c.loadImm) },
	0x30: func(c *CPU) { jr(c, FlagC, false, c.loadImm) },
	0x31: func(c *CPU) { ld16(c, c.storeSP, c.loadImm16) },
	0x32: func(c *CPU) { ld(c, c.storeIndImm, c.loadA) },
	0x33: func(c *CPU) { inc16(c, c.storeSP, c.loadSP) },
	0x34: func(c *CPU) { inc(c, c.storeIndHL, c.loadIndHL) },
	0x35: func(c *CPU) { dec(c, c.storeIndHL, c.loadIndHL) },
	0x36: func(c *CPU) { ld(c, c.storeIndHL, c.loadImm) },
	0x38: func(c *CPU) { jr(c, FlagC, true, c.loadImm) },
	0x39: func(c *CPU) { add16(c, c.storeHL, c.loadHL, c.loadSP) },
	0x3a: func(c *CPU) { ld(c, c.storeA, c.loadIndImm) },
	0x3b: func(c *CPU) { dec16(c, c.storeSP, c.loadSP) },
	0x3c: func(c *CPU) { inc(c, c.storeA, c.loadA) },
	0x3d: func(c *CPU) { dec(c, c.storeA, c.loadA) },
	0x3e: func(c *CPU) { ld(c, c.storeA, c.loadImm) },
}
