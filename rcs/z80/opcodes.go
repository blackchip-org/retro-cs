// Code generated by gen/z80/opcodes/opcodes.go. DO NOT EDIT.

package z80

var opcodes = map[uint8]func(c *CPU){
	0x00: func(c *CPU) { nop() },
	0x01: func(c *CPU) { ld16(c, c.storeBC, c.loadImm16) },
	0x02: func(c *CPU) { ld(c, c.storeIndBC, c.loadA) },
	0x03: func(c *CPU) { inc16(c, c.storeBC, c.loadBC) },
	0x04: func(c *CPU) { inc(c, c.storeB, c.loadB) },
	0x05: func(c *CPU) { dec(c, c.storeB, c.loadB) },
	0x06: func(c *CPU) { ld(c, c.storeB, c.loadImm) },
	0x07: func(c *CPU) { rlca(c) },
	0x08: func(c *CPU) { ex(c, c.loadAF, c.storeAF, c.loadAF1, c.storeAF1) },
	0x09: func(c *CPU) { add16(c, c.storeHL, c.loadHL, c.loadBC) },
	0x0a: func(c *CPU) { ld(c, c.storeA, c.loadIndBC) },
	0x0b: func(c *CPU) { dec16(c, c.storeBC, c.loadBC) },
	0x0c: func(c *CPU) { inc(c, c.storeC, c.loadC) },
	0x0d: func(c *CPU) { dec(c, c.storeC, c.loadC) },
	0x0e: func(c *CPU) { ld(c, c.storeC, c.loadImm) },
	0x0f: func(c *CPU) { rrca(c) },
	0x10: func(c *CPU) { djnz(c, c.loadImm) },
	0x11: func(c *CPU) { ld16(c, c.storeDE, c.loadImm16) },
	0x12: func(c *CPU) { ld(c, c.storeIndDE, c.loadA) },
	0x13: func(c *CPU) { inc16(c, c.storeDE, c.loadDE) },
	0x14: func(c *CPU) { inc(c, c.storeD, c.loadD) },
	0x15: func(c *CPU) { dec(c, c.storeD, c.loadD) },
	0x16: func(c *CPU) { ld(c, c.storeD, c.loadImm) },
	0x17: func(c *CPU) { rla(c) },
	0x18: func(c *CPU) { jra(c, c.loadImm) },
	0x19: func(c *CPU) { add16(c, c.storeHL, c.loadHL, c.loadDE) },
	0x1a: func(c *CPU) { ld(c, c.storeA, c.loadIndDE) },
	0x1b: func(c *CPU) { dec16(c, c.storeDE, c.loadDE) },
	0x1c: func(c *CPU) { inc(c, c.storeE, c.loadE) },
	0x1d: func(c *CPU) { dec(c, c.storeE, c.loadE) },
	0x1e: func(c *CPU) { ld(c, c.storeE, c.loadImm) },
	0x1f: func(c *CPU) { rra(c) },
	0x20: func(c *CPU) { jr(c, FlagZ, false, c.loadImm) },
	0x21: func(c *CPU) { ld16(c, c.storeHL, c.loadImm16) },
	0x22: func(c *CPU) { ld16(c, c.store16IndImm, c.loadHL) },
	0x23: func(c *CPU) { inc16(c, c.storeHL, c.loadHL) },
	0x24: func(c *CPU) { inc(c, c.storeH, c.loadH) },
	0x25: func(c *CPU) { dec(c, c.storeH, c.loadH) },
	0x26: func(c *CPU) { ld(c, c.storeH, c.loadImm) },
	0x27: func(c *CPU) { daa(c) },
	0x28: func(c *CPU) { jr(c, FlagZ, true, c.loadImm) },
	0x29: func(c *CPU) { add16(c, c.storeHL, c.loadHL, c.loadHL) },
	0x2a: func(c *CPU) { ld16(c, c.storeHL, c.load16IndImm) },
	0x2b: func(c *CPU) { dec16(c, c.storeHL, c.loadHL) },
	0x2c: func(c *CPU) { inc(c, c.storeL, c.loadL) },
	0x2d: func(c *CPU) { dec(c, c.storeL, c.loadL) },
	0x2e: func(c *CPU) { ld(c, c.storeL, c.loadImm) },
	0x2f: func(c *CPU) { cpl(c) },
	0x30: func(c *CPU) { jr(c, FlagC, false, c.loadImm) },
	0x31: func(c *CPU) { ld16(c, c.storeSP, c.loadImm16) },
	0x32: func(c *CPU) { ld(c, c.storeIndImm, c.loadA) },
	0x33: func(c *CPU) { inc16(c, c.storeSP, c.loadSP) },
	0x34: func(c *CPU) { inc(c, c.storeIndHL, c.loadIndHL) },
	0x35: func(c *CPU) { dec(c, c.storeIndHL, c.loadIndHL) },
	0x36: func(c *CPU) { ld(c, c.storeIndHL, c.loadImm) },
	0x37: func(c *CPU) { scf(c) },
	0x38: func(c *CPU) { jr(c, FlagC, true, c.loadImm) },
	0x39: func(c *CPU) { add16(c, c.storeHL, c.loadHL, c.loadSP) },
	0x3a: func(c *CPU) { ld(c, c.storeA, c.loadIndImm) },
	0x3b: func(c *CPU) { dec16(c, c.storeSP, c.loadSP) },
	0x3c: func(c *CPU) { inc(c, c.storeA, c.loadA) },
	0x3d: func(c *CPU) { dec(c, c.storeA, c.loadA) },
	0x3e: func(c *CPU) { ld(c, c.storeA, c.loadImm) },
	0x3f: func(c *CPU) { ccf(c) },
	0x40: func(c *CPU) { ld(c, c.storeB, c.loadB) },
	0x41: func(c *CPU) { ld(c, c.storeB, c.loadC) },
	0x42: func(c *CPU) { ld(c, c.storeB, c.loadD) },
	0x43: func(c *CPU) { ld(c, c.storeB, c.loadE) },
	0x44: func(c *CPU) { ld(c, c.storeB, c.loadH) },
	0x45: func(c *CPU) { ld(c, c.storeB, c.loadL) },
	0x46: func(c *CPU) { ld(c, c.storeB, c.loadIndHL) },
	0x47: func(c *CPU) { ld(c, c.storeB, c.loadA) },
	0x48: func(c *CPU) { ld(c, c.storeC, c.loadB) },
	0x49: func(c *CPU) { ld(c, c.storeC, c.loadC) },
	0x4a: func(c *CPU) { ld(c, c.storeC, c.loadD) },
	0x4b: func(c *CPU) { ld(c, c.storeC, c.loadE) },
	0x4c: func(c *CPU) { ld(c, c.storeC, c.loadH) },
	0x4d: func(c *CPU) { ld(c, c.storeC, c.loadL) },
	0x4e: func(c *CPU) { ld(c, c.storeC, c.loadIndHL) },
	0x4f: func(c *CPU) { ld(c, c.storeC, c.loadA) },
	0x50: func(c *CPU) { ld(c, c.storeD, c.loadB) },
	0x51: func(c *CPU) { ld(c, c.storeD, c.loadC) },
	0x52: func(c *CPU) { ld(c, c.storeD, c.loadD) },
	0x53: func(c *CPU) { ld(c, c.storeD, c.loadE) },
	0x54: func(c *CPU) { ld(c, c.storeD, c.loadH) },
	0x55: func(c *CPU) { ld(c, c.storeD, c.loadL) },
	0x56: func(c *CPU) { ld(c, c.storeD, c.loadIndHL) },
	0x57: func(c *CPU) { ld(c, c.storeD, c.loadA) },
	0x58: func(c *CPU) { ld(c, c.storeE, c.loadB) },
	0x59: func(c *CPU) { ld(c, c.storeE, c.loadC) },
	0x5a: func(c *CPU) { ld(c, c.storeE, c.loadD) },
	0x5b: func(c *CPU) { ld(c, c.storeE, c.loadE) },
	0x5c: func(c *CPU) { ld(c, c.storeE, c.loadH) },
	0x5d: func(c *CPU) { ld(c, c.storeE, c.loadL) },
	0x5e: func(c *CPU) { ld(c, c.storeE, c.loadIndHL) },
	0x5f: func(c *CPU) { ld(c, c.storeE, c.loadA) },
	0x60: func(c *CPU) { ld(c, c.storeH, c.loadB) },
	0x61: func(c *CPU) { ld(c, c.storeH, c.loadC) },
	0x62: func(c *CPU) { ld(c, c.storeH, c.loadD) },
	0x63: func(c *CPU) { ld(c, c.storeH, c.loadE) },
	0x64: func(c *CPU) { ld(c, c.storeH, c.loadH) },
	0x65: func(c *CPU) { ld(c, c.storeH, c.loadL) },
	0x66: func(c *CPU) { ld(c, c.storeH, c.loadIndHL) },
	0x67: func(c *CPU) { ld(c, c.storeH, c.loadA) },
	0x68: func(c *CPU) { ld(c, c.storeL, c.loadB) },
	0x69: func(c *CPU) { ld(c, c.storeL, c.loadC) },
	0x6a: func(c *CPU) { ld(c, c.storeL, c.loadD) },
	0x6b: func(c *CPU) { ld(c, c.storeL, c.loadE) },
	0x6c: func(c *CPU) { ld(c, c.storeL, c.loadH) },
	0x6d: func(c *CPU) { ld(c, c.storeL, c.loadL) },
	0x6e: func(c *CPU) { ld(c, c.storeL, c.loadIndHL) },
	0x6f: func(c *CPU) { ld(c, c.storeL, c.loadA) },
	0x70: func(c *CPU) { ld(c, c.storeIndHL, c.loadB) },
	0x71: func(c *CPU) { ld(c, c.storeIndHL, c.loadC) },
	0x72: func(c *CPU) { ld(c, c.storeIndHL, c.loadD) },
	0x73: func(c *CPU) { ld(c, c.storeIndHL, c.loadE) },
	0x74: func(c *CPU) { ld(c, c.storeIndHL, c.loadH) },
	0x75: func(c *CPU) { ld(c, c.storeIndHL, c.loadL) },
	0x76: func(c *CPU) { halt(c) },
	0x77: func(c *CPU) { ld(c, c.storeIndHL, c.loadA) },
	0x78: func(c *CPU) { ld(c, c.storeA, c.loadB) },
	0x79: func(c *CPU) { ld(c, c.storeA, c.loadC) },
	0x7a: func(c *CPU) { ld(c, c.storeA, c.loadD) },
	0x7b: func(c *CPU) { ld(c, c.storeA, c.loadE) },
	0x7c: func(c *CPU) { ld(c, c.storeA, c.loadH) },
	0x7d: func(c *CPU) { ld(c, c.storeA, c.loadL) },
	0x7e: func(c *CPU) { ld(c, c.storeA, c.loadIndHL) },
	0x7f: func(c *CPU) { ld(c, c.storeA, c.loadA) },
	0x80: func(c *CPU) { add(c, c.loadA, c.loadB) },
	0x81: func(c *CPU) { add(c, c.loadA, c.loadC) },
	0x82: func(c *CPU) { add(c, c.loadA, c.loadD) },
	0x83: func(c *CPU) { add(c, c.loadA, c.loadE) },
	0x84: func(c *CPU) { add(c, c.loadA, c.loadH) },
	0x85: func(c *CPU) { add(c, c.loadA, c.loadL) },
	0x86: func(c *CPU) { add(c, c.loadA, c.loadIndHL) },
	0x87: func(c *CPU) { add(c, c.loadA, c.loadA) },
	0x88: func(c *CPU) { adc(c, c.loadA, c.loadB) },
	0x89: func(c *CPU) { adc(c, c.loadA, c.loadC) },
	0x8a: func(c *CPU) { adc(c, c.loadA, c.loadD) },
	0x8b: func(c *CPU) { adc(c, c.loadA, c.loadE) },
	0x8c: func(c *CPU) { adc(c, c.loadA, c.loadH) },
	0x8d: func(c *CPU) { adc(c, c.loadA, c.loadL) },
	0x8e: func(c *CPU) { adc(c, c.loadA, c.loadIndHL) },
	0x8f: func(c *CPU) { adc(c, c.loadA, c.loadA) },
	0x90: func(c *CPU) { sub(c, c.loadA, c.loadB) },
	0x91: func(c *CPU) { sub(c, c.loadA, c.loadC) },
	0x92: func(c *CPU) { sub(c, c.loadA, c.loadD) },
	0x93: func(c *CPU) { sub(c, c.loadA, c.loadE) },
	0x94: func(c *CPU) { sub(c, c.loadA, c.loadH) },
	0x95: func(c *CPU) { sub(c, c.loadA, c.loadL) },
	0x96: func(c *CPU) { sub(c, c.loadA, c.loadIndHL) },
	0x97: func(c *CPU) { sub(c, c.loadA, c.loadA) },
	0x98: func(c *CPU) { sbc(c, c.loadA, c.loadB) },
	0x99: func(c *CPU) { sbc(c, c.loadA, c.loadC) },
	0x9a: func(c *CPU) { sbc(c, c.loadA, c.loadD) },
	0x9b: func(c *CPU) { sbc(c, c.loadA, c.loadE) },
	0x9c: func(c *CPU) { sbc(c, c.loadA, c.loadH) },
	0x9d: func(c *CPU) { sbc(c, c.loadA, c.loadL) },
	0x9e: func(c *CPU) { sbc(c, c.loadA, c.loadIndHL) },
	0x9f: func(c *CPU) { sbc(c, c.loadA, c.loadA) },
	0xa0: func(c *CPU) { and(c, c.loadB) },
	0xa1: func(c *CPU) { and(c, c.loadC) },
	0xa2: func(c *CPU) { and(c, c.loadD) },
	0xa3: func(c *CPU) { and(c, c.loadE) },
	0xa4: func(c *CPU) { and(c, c.loadH) },
	0xa5: func(c *CPU) { and(c, c.loadL) },
	0xa6: func(c *CPU) { and(c, c.loadIndHL) },
	0xa7: func(c *CPU) { and(c, c.loadA) },
	0xa8: func(c *CPU) { xor(c, c.loadB) },
	0xa9: func(c *CPU) { xor(c, c.loadC) },
	0xaa: func(c *CPU) { xor(c, c.loadD) },
	0xab: func(c *CPU) { xor(c, c.loadE) },
	0xac: func(c *CPU) { xor(c, c.loadH) },
	0xad: func(c *CPU) { xor(c, c.loadL) },
	0xae: func(c *CPU) { xor(c, c.loadIndHL) },
	0xaf: func(c *CPU) { xor(c, c.loadA) },
	0xb0: func(c *CPU) { or(c, c.loadB) },
	0xb1: func(c *CPU) { or(c, c.loadC) },
	0xb2: func(c *CPU) { or(c, c.loadD) },
	0xb3: func(c *CPU) { or(c, c.loadE) },
	0xb4: func(c *CPU) { or(c, c.loadH) },
	0xb5: func(c *CPU) { or(c, c.loadL) },
	0xb6: func(c *CPU) { or(c, c.loadIndHL) },
	0xb7: func(c *CPU) { or(c, c.loadA) },
	0xb8: func(c *CPU) { cp(c, c.loadB) },
	0xb9: func(c *CPU) { cp(c, c.loadC) },
	0xba: func(c *CPU) { cp(c, c.loadD) },
	0xbb: func(c *CPU) { cp(c, c.loadE) },
	0xbc: func(c *CPU) { cp(c, c.loadH) },
	0xbd: func(c *CPU) { cp(c, c.loadL) },
	0xbe: func(c *CPU) { cp(c, c.loadIndHL) },
	0xbf: func(c *CPU) { cp(c, c.loadA) },
	0xc0: func(c *CPU) { ret(c, FlagZ, false) },
	0xc1: func(c *CPU) { pop(c, c.storeBC) },
	0xc2: func(c *CPU) { jp(c, FlagZ, false, c.loadImm16) },
	0xc3: func(c *CPU) { jpa(c, c.loadImm16) },
	0xc4: func(c *CPU) { call(c, FlagZ, false, c.loadImm16) },
	0xc5: func(c *CPU) { push(c, c.loadBC) },
	0xc6: func(c *CPU) { add(c, c.loadA, c.loadImm) },
	0xc7: func(c *CPU) { rst(c, 0) },
	0xc8: func(c *CPU) { ret(c, FlagZ, true) },
	0xc9: func(c *CPU) { reta(c) },
	0xca: func(c *CPU) { jp(c, FlagZ, true, c.loadImm16) },
	0xcc: func(c *CPU) { call(c, FlagZ, true, c.loadImm16) },
	0xcd: func(c *CPU) { calla(c, c.loadImm16) },
	0xce: func(c *CPU) { adc(c, c.loadA, c.loadImm) },
	0xcf: func(c *CPU) { rst(c, 1) },
	0xd0: func(c *CPU) { ret(c, FlagC, false) },
	0xd1: func(c *CPU) { pop(c, c.storeDE) },
	0xd2: func(c *CPU) { jp(c, FlagC, false, c.loadImm16) },
	0xd3: func(c *CPU) { ld(c, c.outIndImm, c.loadA) },
	0xd4: func(c *CPU) { call(c, FlagC, false, c.loadImm16) },
	0xd5: func(c *CPU) { push(c, c.loadDE) },
	0xd6: func(c *CPU) { sub(c, c.loadA, c.loadImm) },
	0xd7: func(c *CPU) { rst(c, 2) },
	0xd8: func(c *CPU) { ret(c, FlagC, true) },
	0xd9: func(c *CPU) { exx(c) },
	0xda: func(c *CPU) { jp(c, FlagC, true, c.loadImm16) },
	0xdb: func(c *CPU) { ld(c, c.storeA, c.inIndImm) },
	0xdc: func(c *CPU) { call(c, FlagC, true, c.loadImm16) },
	0xde: func(c *CPU) { sbc(c, c.loadA, c.loadImm) },
	0xdf: func(c *CPU) { rst(c, 3) },
	0xe0: func(c *CPU) { ret(c, FlagV, false) },
	0xe1: func(c *CPU) { pop(c, c.storeHL) },
	0xe2: func(c *CPU) { jp(c, FlagV, false, c.loadImm16) },
	0xe3: func(c *CPU) { ex(c, c.load16IndSP, c.store16IndSP, c.loadHL, c.storeHL) },
	0xe4: func(c *CPU) { call(c, FlagV, false, c.loadImm16) },
	0xe5: func(c *CPU) { push(c, c.loadHL) },
	0xe6: func(c *CPU) { and(c, c.loadImm) },
	0xe7: func(c *CPU) { rst(c, 4) },
	0xe8: func(c *CPU) { ret(c, FlagV, true) },
	0xe9: func(c *CPU) { jpa(c, c.loadHL) },
	0xea: func(c *CPU) { jp(c, FlagV, true, c.loadImm16) },
	0xeb: func(c *CPU) { ex(c, c.loadDE, c.storeDE, c.loadHL, c.storeHL) },
	0xec: func(c *CPU) { call(c, FlagV, true, c.loadImm16) },
	0xee: func(c *CPU) { xor(c, c.loadImm) },
	0xef: func(c *CPU) { rst(c, 5) },
	0xf0: func(c *CPU) { ret(c, FlagS, false) },
	0xf1: func(c *CPU) { pop(c, c.storeAF) },
	0xf2: func(c *CPU) { jp(c, FlagS, false, c.loadImm16) },
	0xf3: func(c *CPU) { di(c) },
	0xf4: func(c *CPU) { call(c, FlagS, false, c.loadImm16) },
	0xf5: func(c *CPU) { push(c, c.loadAF) },
	0xf6: func(c *CPU) { or(c, c.loadImm) },
	0xf7: func(c *CPU) { rst(c, 6) },
	0xf8: func(c *CPU) { ret(c, FlagS, true) },
	0xf9: func(c *CPU) { ld16(c, c.storeSP, c.loadHL) },
	0xfa: func(c *CPU) { jp(c, FlagS, true, c.loadImm16) },
	0xfb: func(c *CPU) { ei(c) },
	0xfc: func(c *CPU) { call(c, FlagS, true, c.loadImm16) },
	0xfe: func(c *CPU) { cp(c, c.loadImm) },
	0xff: func(c *CPU) { rst(c, 7) },
}
var opcodesCB = map[uint8]func(c *CPU){
	0x00: func(c *CPU) { rlc(c, c.storeB, c.loadB) },
	0x01: func(c *CPU) { rlc(c, c.storeC, c.loadC) },
	0x02: func(c *CPU) { rlc(c, c.storeD, c.loadD) },
	0x03: func(c *CPU) { rlc(c, c.storeE, c.loadE) },
	0x04: func(c *CPU) { rlc(c, c.storeH, c.loadH) },
	0x05: func(c *CPU) { rlc(c, c.storeL, c.loadL) },
	0x06: func(c *CPU) { rlc(c, c.storeIndHL, c.loadIndHL) },
	0x07: func(c *CPU) { rlc(c, c.storeA, c.loadA) },
	0x08: func(c *CPU) { rrc(c, c.storeB, c.loadB) },
	0x09: func(c *CPU) { rrc(c, c.storeC, c.loadC) },
	0x0a: func(c *CPU) { rrc(c, c.storeD, c.loadD) },
	0x0b: func(c *CPU) { rrc(c, c.storeE, c.loadE) },
	0x0c: func(c *CPU) { rrc(c, c.storeH, c.loadH) },
	0x0d: func(c *CPU) { rrc(c, c.storeL, c.loadL) },
	0x0e: func(c *CPU) { rrc(c, c.storeIndHL, c.loadIndHL) },
	0x0f: func(c *CPU) { rrc(c, c.storeA, c.loadA) },
	0x10: func(c *CPU) { rl(c, c.storeB, c.loadB) },
	0x11: func(c *CPU) { rl(c, c.storeC, c.loadC) },
	0x12: func(c *CPU) { rl(c, c.storeD, c.loadD) },
	0x13: func(c *CPU) { rl(c, c.storeE, c.loadE) },
	0x14: func(c *CPU) { rl(c, c.storeH, c.loadH) },
	0x15: func(c *CPU) { rl(c, c.storeL, c.loadL) },
	0x16: func(c *CPU) { rl(c, c.storeIndHL, c.loadIndHL) },
	0x17: func(c *CPU) { rl(c, c.storeA, c.loadA) },
	0x18: func(c *CPU) { rr(c, c.storeB, c.loadB) },
	0x19: func(c *CPU) { rr(c, c.storeC, c.loadC) },
	0x1a: func(c *CPU) { rr(c, c.storeD, c.loadD) },
	0x1b: func(c *CPU) { rr(c, c.storeE, c.loadE) },
	0x1c: func(c *CPU) { rr(c, c.storeH, c.loadH) },
	0x1d: func(c *CPU) { rr(c, c.storeL, c.loadL) },
	0x1e: func(c *CPU) { rr(c, c.storeIndHL, c.loadIndHL) },
	0x1f: func(c *CPU) { rr(c, c.storeA, c.loadA) },
	0x20: func(c *CPU) { sla(c, c.storeB, c.loadB) },
	0x21: func(c *CPU) { sla(c, c.storeC, c.loadC) },
	0x22: func(c *CPU) { sla(c, c.storeD, c.loadD) },
	0x23: func(c *CPU) { sla(c, c.storeE, c.loadE) },
	0x24: func(c *CPU) { sla(c, c.storeH, c.loadH) },
	0x25: func(c *CPU) { sla(c, c.storeL, c.loadL) },
	0x26: func(c *CPU) { sla(c, c.storeIndHL, c.loadIndHL) },
	0x27: func(c *CPU) { sla(c, c.storeA, c.loadA) },
	0x28: func(c *CPU) { sra(c, c.storeB, c.loadB) },
	0x29: func(c *CPU) { sra(c, c.storeC, c.loadC) },
	0x2a: func(c *CPU) { sra(c, c.storeD, c.loadD) },
	0x2b: func(c *CPU) { sra(c, c.storeE, c.loadE) },
	0x2c: func(c *CPU) { sra(c, c.storeH, c.loadH) },
	0x2d: func(c *CPU) { sra(c, c.storeL, c.loadL) },
	0x2e: func(c *CPU) { sra(c, c.storeIndHL, c.loadIndHL) },
	0x2f: func(c *CPU) { sra(c, c.storeA, c.loadA) },
	0x30: func(c *CPU) { sll(c, c.storeB, c.loadB) },
	0x31: func(c *CPU) { sll(c, c.storeC, c.loadC) },
	0x32: func(c *CPU) { sll(c, c.storeD, c.loadD) },
	0x33: func(c *CPU) { sll(c, c.storeE, c.loadE) },
	0x34: func(c *CPU) { sll(c, c.storeH, c.loadH) },
	0x35: func(c *CPU) { sll(c, c.storeL, c.loadL) },
	0x36: func(c *CPU) { sll(c, c.storeIndHL, c.loadIndHL) },
	0x37: func(c *CPU) { sll(c, c.storeA, c.loadA) },
	0x38: func(c *CPU) { srl(c, c.storeB, c.loadB) },
	0x39: func(c *CPU) { srl(c, c.storeC, c.loadC) },
	0x3a: func(c *CPU) { srl(c, c.storeD, c.loadD) },
	0x3b: func(c *CPU) { srl(c, c.storeE, c.loadE) },
	0x3c: func(c *CPU) { srl(c, c.storeH, c.loadH) },
	0x3d: func(c *CPU) { srl(c, c.storeL, c.loadL) },
	0x3e: func(c *CPU) { srl(c, c.storeIndHL, c.loadIndHL) },
	0x3f: func(c *CPU) { srl(c, c.storeA, c.loadA) },
	0x40: func(c *CPU) { bit(c, 0, c.loadB) },
	0x41: func(c *CPU) { bit(c, 0, c.loadC) },
	0x42: func(c *CPU) { bit(c, 0, c.loadD) },
	0x43: func(c *CPU) { bit(c, 0, c.loadE) },
	0x44: func(c *CPU) { bit(c, 0, c.loadH) },
	0x45: func(c *CPU) { bit(c, 0, c.loadL) },
	0x46: func(c *CPU) { bit(c, 0, c.loadIndHL) },
	0x47: func(c *CPU) { bit(c, 0, c.loadA) },
	0x48: func(c *CPU) { bit(c, 1, c.loadB) },
	0x49: func(c *CPU) { bit(c, 1, c.loadC) },
	0x4a: func(c *CPU) { bit(c, 1, c.loadD) },
	0x4b: func(c *CPU) { bit(c, 1, c.loadE) },
	0x4c: func(c *CPU) { bit(c, 1, c.loadH) },
	0x4d: func(c *CPU) { bit(c, 1, c.loadL) },
	0x4e: func(c *CPU) { bit(c, 1, c.loadIndHL) },
	0x4f: func(c *CPU) { bit(c, 1, c.loadA) },
	0x50: func(c *CPU) { bit(c, 2, c.loadB) },
	0x51: func(c *CPU) { bit(c, 2, c.loadC) },
	0x52: func(c *CPU) { bit(c, 2, c.loadD) },
	0x53: func(c *CPU) { bit(c, 2, c.loadE) },
	0x54: func(c *CPU) { bit(c, 2, c.loadH) },
	0x55: func(c *CPU) { bit(c, 2, c.loadL) },
	0x56: func(c *CPU) { bit(c, 2, c.loadIndHL) },
	0x57: func(c *CPU) { bit(c, 2, c.loadA) },
	0x58: func(c *CPU) { bit(c, 3, c.loadB) },
	0x59: func(c *CPU) { bit(c, 3, c.loadC) },
	0x5a: func(c *CPU) { bit(c, 3, c.loadD) },
	0x5b: func(c *CPU) { bit(c, 3, c.loadE) },
	0x5c: func(c *CPU) { bit(c, 3, c.loadH) },
	0x5d: func(c *CPU) { bit(c, 3, c.loadL) },
	0x5e: func(c *CPU) { bit(c, 3, c.loadIndHL) },
	0x5f: func(c *CPU) { bit(c, 3, c.loadA) },
	0x60: func(c *CPU) { bit(c, 4, c.loadB) },
	0x61: func(c *CPU) { bit(c, 4, c.loadC) },
	0x62: func(c *CPU) { bit(c, 4, c.loadD) },
	0x63: func(c *CPU) { bit(c, 4, c.loadE) },
	0x64: func(c *CPU) { bit(c, 4, c.loadH) },
	0x65: func(c *CPU) { bit(c, 4, c.loadL) },
	0x66: func(c *CPU) { bit(c, 4, c.loadIndHL) },
	0x67: func(c *CPU) { bit(c, 4, c.loadA) },
	0x68: func(c *CPU) { bit(c, 5, c.loadB) },
	0x69: func(c *CPU) { bit(c, 5, c.loadC) },
	0x6a: func(c *CPU) { bit(c, 5, c.loadD) },
	0x6b: func(c *CPU) { bit(c, 5, c.loadE) },
	0x6c: func(c *CPU) { bit(c, 5, c.loadH) },
	0x6d: func(c *CPU) { bit(c, 5, c.loadL) },
	0x6e: func(c *CPU) { bit(c, 5, c.loadIndHL) },
	0x6f: func(c *CPU) { bit(c, 5, c.loadA) },
	0x70: func(c *CPU) { bit(c, 6, c.loadB) },
	0x71: func(c *CPU) { bit(c, 6, c.loadC) },
	0x72: func(c *CPU) { bit(c, 6, c.loadD) },
	0x73: func(c *CPU) { bit(c, 6, c.loadE) },
	0x74: func(c *CPU) { bit(c, 6, c.loadH) },
	0x75: func(c *CPU) { bit(c, 6, c.loadL) },
	0x76: func(c *CPU) { bit(c, 6, c.loadIndHL) },
	0x77: func(c *CPU) { bit(c, 6, c.loadA) },
	0x78: func(c *CPU) { bit(c, 7, c.loadB) },
	0x79: func(c *CPU) { bit(c, 7, c.loadC) },
	0x7a: func(c *CPU) { bit(c, 7, c.loadD) },
	0x7b: func(c *CPU) { bit(c, 7, c.loadE) },
	0x7c: func(c *CPU) { bit(c, 7, c.loadH) },
	0x7d: func(c *CPU) { bit(c, 7, c.loadL) },
	0x7e: func(c *CPU) { bit(c, 7, c.loadIndHL) },
	0x7f: func(c *CPU) { bit(c, 7, c.loadA) },
	0x80: func(c *CPU) { res(c, 0, c.storeB, c.loadB) },
	0x81: func(c *CPU) { res(c, 0, c.storeC, c.loadC) },
	0x82: func(c *CPU) { res(c, 0, c.storeD, c.loadD) },
	0x83: func(c *CPU) { res(c, 0, c.storeE, c.loadE) },
	0x84: func(c *CPU) { res(c, 0, c.storeH, c.loadH) },
	0x85: func(c *CPU) { res(c, 0, c.storeL, c.loadL) },
	0x86: func(c *CPU) { res(c, 0, c.storeIndHL, c.loadIndHL) },
	0x87: func(c *CPU) { res(c, 0, c.storeA, c.loadA) },
	0x88: func(c *CPU) { res(c, 1, c.storeB, c.loadB) },
	0x89: func(c *CPU) { res(c, 1, c.storeC, c.loadC) },
	0x8a: func(c *CPU) { res(c, 1, c.storeD, c.loadD) },
	0x8b: func(c *CPU) { res(c, 1, c.storeE, c.loadE) },
	0x8c: func(c *CPU) { res(c, 1, c.storeH, c.loadH) },
	0x8d: func(c *CPU) { res(c, 1, c.storeL, c.loadL) },
	0x8e: func(c *CPU) { res(c, 1, c.storeIndHL, c.loadIndHL) },
	0x8f: func(c *CPU) { res(c, 1, c.storeA, c.loadA) },
	0x90: func(c *CPU) { res(c, 2, c.storeB, c.loadB) },
	0x91: func(c *CPU) { res(c, 2, c.storeC, c.loadC) },
	0x92: func(c *CPU) { res(c, 2, c.storeD, c.loadD) },
	0x93: func(c *CPU) { res(c, 2, c.storeE, c.loadE) },
	0x94: func(c *CPU) { res(c, 2, c.storeH, c.loadH) },
	0x95: func(c *CPU) { res(c, 2, c.storeL, c.loadL) },
	0x96: func(c *CPU) { res(c, 2, c.storeIndHL, c.loadIndHL) },
	0x97: func(c *CPU) { res(c, 2, c.storeA, c.loadA) },
	0x98: func(c *CPU) { res(c, 3, c.storeB, c.loadB) },
	0x99: func(c *CPU) { res(c, 3, c.storeC, c.loadC) },
	0x9a: func(c *CPU) { res(c, 3, c.storeD, c.loadD) },
	0x9b: func(c *CPU) { res(c, 3, c.storeE, c.loadE) },
	0x9c: func(c *CPU) { res(c, 3, c.storeH, c.loadH) },
	0x9d: func(c *CPU) { res(c, 3, c.storeL, c.loadL) },
	0x9e: func(c *CPU) { res(c, 3, c.storeIndHL, c.loadIndHL) },
	0x9f: func(c *CPU) { res(c, 3, c.storeA, c.loadA) },
	0xa0: func(c *CPU) { res(c, 4, c.storeB, c.loadB) },
	0xa1: func(c *CPU) { res(c, 4, c.storeC, c.loadC) },
	0xa2: func(c *CPU) { res(c, 4, c.storeD, c.loadD) },
	0xa3: func(c *CPU) { res(c, 4, c.storeE, c.loadE) },
	0xa4: func(c *CPU) { res(c, 4, c.storeH, c.loadH) },
	0xa5: func(c *CPU) { res(c, 4, c.storeL, c.loadL) },
	0xa6: func(c *CPU) { res(c, 4, c.storeIndHL, c.loadIndHL) },
	0xa7: func(c *CPU) { res(c, 4, c.storeA, c.loadA) },
	0xa8: func(c *CPU) { res(c, 5, c.storeB, c.loadB) },
	0xa9: func(c *CPU) { res(c, 5, c.storeC, c.loadC) },
	0xaa: func(c *CPU) { res(c, 5, c.storeD, c.loadD) },
	0xab: func(c *CPU) { res(c, 5, c.storeE, c.loadE) },
	0xac: func(c *CPU) { res(c, 5, c.storeH, c.loadH) },
	0xad: func(c *CPU) { res(c, 5, c.storeL, c.loadL) },
	0xae: func(c *CPU) { res(c, 5, c.storeIndHL, c.loadIndHL) },
	0xaf: func(c *CPU) { res(c, 5, c.storeA, c.loadA) },
	0xb0: func(c *CPU) { res(c, 6, c.storeB, c.loadB) },
	0xb1: func(c *CPU) { res(c, 6, c.storeC, c.loadC) },
	0xb2: func(c *CPU) { res(c, 6, c.storeD, c.loadD) },
	0xb3: func(c *CPU) { res(c, 6, c.storeE, c.loadE) },
	0xb4: func(c *CPU) { res(c, 6, c.storeH, c.loadH) },
	0xb5: func(c *CPU) { res(c, 6, c.storeL, c.loadL) },
	0xb6: func(c *CPU) { res(c, 6, c.storeIndHL, c.loadIndHL) },
	0xb7: func(c *CPU) { res(c, 6, c.storeA, c.loadA) },
	0xb8: func(c *CPU) { res(c, 7, c.storeB, c.loadB) },
	0xb9: func(c *CPU) { res(c, 7, c.storeC, c.loadC) },
	0xba: func(c *CPU) { res(c, 7, c.storeD, c.loadD) },
	0xbb: func(c *CPU) { res(c, 7, c.storeE, c.loadE) },
	0xbc: func(c *CPU) { res(c, 7, c.storeH, c.loadH) },
	0xbd: func(c *CPU) { res(c, 7, c.storeL, c.loadL) },
	0xbe: func(c *CPU) { res(c, 7, c.storeIndHL, c.loadIndHL) },
	0xbf: func(c *CPU) { res(c, 7, c.storeA, c.loadA) },
	0xc0: func(c *CPU) { set(c, 0, c.storeB, c.loadB) },
	0xc1: func(c *CPU) { set(c, 0, c.storeC, c.loadC) },
	0xc2: func(c *CPU) { set(c, 0, c.storeD, c.loadD) },
	0xc3: func(c *CPU) { set(c, 0, c.storeE, c.loadE) },
	0xc4: func(c *CPU) { set(c, 0, c.storeH, c.loadH) },
	0xc5: func(c *CPU) { set(c, 0, c.storeL, c.loadL) },
	0xc6: func(c *CPU) { set(c, 0, c.storeIndHL, c.loadIndHL) },
	0xc7: func(c *CPU) { set(c, 0, c.storeA, c.loadA) },
	0xc8: func(c *CPU) { set(c, 1, c.storeB, c.loadB) },
	0xc9: func(c *CPU) { set(c, 1, c.storeC, c.loadC) },
	0xca: func(c *CPU) { set(c, 1, c.storeD, c.loadD) },
	0xcb: func(c *CPU) { set(c, 1, c.storeE, c.loadE) },
	0xcc: func(c *CPU) { set(c, 1, c.storeH, c.loadH) },
	0xcd: func(c *CPU) { set(c, 1, c.storeL, c.loadL) },
	0xce: func(c *CPU) { set(c, 1, c.storeIndHL, c.loadIndHL) },
	0xcf: func(c *CPU) { set(c, 1, c.storeA, c.loadA) },
	0xd0: func(c *CPU) { set(c, 2, c.storeB, c.loadB) },
	0xd1: func(c *CPU) { set(c, 2, c.storeC, c.loadC) },
	0xd2: func(c *CPU) { set(c, 2, c.storeD, c.loadD) },
	0xd3: func(c *CPU) { set(c, 2, c.storeE, c.loadE) },
	0xd4: func(c *CPU) { set(c, 2, c.storeH, c.loadH) },
	0xd5: func(c *CPU) { set(c, 2, c.storeL, c.loadL) },
	0xd6: func(c *CPU) { set(c, 2, c.storeIndHL, c.loadIndHL) },
	0xd7: func(c *CPU) { set(c, 2, c.storeA, c.loadA) },
	0xd8: func(c *CPU) { set(c, 3, c.storeB, c.loadB) },
	0xd9: func(c *CPU) { set(c, 3, c.storeC, c.loadC) },
	0xda: func(c *CPU) { set(c, 3, c.storeD, c.loadD) },
	0xdb: func(c *CPU) { set(c, 3, c.storeE, c.loadE) },
	0xdc: func(c *CPU) { set(c, 3, c.storeH, c.loadH) },
	0xdd: func(c *CPU) { set(c, 3, c.storeL, c.loadL) },
	0xde: func(c *CPU) { set(c, 3, c.storeIndHL, c.loadIndHL) },
	0xdf: func(c *CPU) { set(c, 3, c.storeA, c.loadA) },
	0xe0: func(c *CPU) { set(c, 4, c.storeB, c.loadB) },
	0xe1: func(c *CPU) { set(c, 4, c.storeC, c.loadC) },
	0xe2: func(c *CPU) { set(c, 4, c.storeD, c.loadD) },
	0xe3: func(c *CPU) { set(c, 4, c.storeE, c.loadE) },
	0xe4: func(c *CPU) { set(c, 4, c.storeH, c.loadH) },
	0xe5: func(c *CPU) { set(c, 4, c.storeL, c.loadL) },
	0xe6: func(c *CPU) { set(c, 4, c.storeIndHL, c.loadIndHL) },
	0xe7: func(c *CPU) { set(c, 4, c.storeA, c.loadA) },
	0xe8: func(c *CPU) { set(c, 5, c.storeB, c.loadB) },
	0xe9: func(c *CPU) { set(c, 5, c.storeC, c.loadC) },
	0xea: func(c *CPU) { set(c, 5, c.storeD, c.loadD) },
	0xeb: func(c *CPU) { set(c, 5, c.storeE, c.loadE) },
	0xec: func(c *CPU) { set(c, 5, c.storeH, c.loadH) },
	0xed: func(c *CPU) { set(c, 5, c.storeL, c.loadL) },
	0xee: func(c *CPU) { set(c, 5, c.storeIndHL, c.loadIndHL) },
	0xef: func(c *CPU) { set(c, 5, c.storeA, c.loadA) },
	0xf0: func(c *CPU) { set(c, 6, c.storeB, c.loadB) },
	0xf1: func(c *CPU) { set(c, 6, c.storeC, c.loadC) },
	0xf2: func(c *CPU) { set(c, 6, c.storeD, c.loadD) },
	0xf3: func(c *CPU) { set(c, 6, c.storeE, c.loadE) },
	0xf4: func(c *CPU) { set(c, 6, c.storeH, c.loadH) },
	0xf5: func(c *CPU) { set(c, 6, c.storeL, c.loadL) },
	0xf6: func(c *CPU) { set(c, 6, c.storeIndHL, c.loadIndHL) },
	0xf7: func(c *CPU) { set(c, 6, c.storeA, c.loadA) },
	0xf8: func(c *CPU) { set(c, 7, c.storeB, c.loadB) },
	0xf9: func(c *CPU) { set(c, 7, c.storeC, c.loadC) },
	0xfa: func(c *CPU) { set(c, 7, c.storeD, c.loadD) },
	0xfb: func(c *CPU) { set(c, 7, c.storeE, c.loadE) },
	0xfc: func(c *CPU) { set(c, 7, c.storeH, c.loadH) },
	0xfd: func(c *CPU) { set(c, 7, c.storeL, c.loadL) },
	0xfe: func(c *CPU) { set(c, 7, c.storeIndHL, c.loadIndHL) },
	0xff: func(c *CPU) { set(c, 7, c.storeA, c.loadA) },
}
var opcodesED = map[uint8]func(c *CPU){
	0x40: func(c *CPU) { in(c, c.storeB, c.loadIndC) },
	0x41: func(c *CPU) { ld(c, c.outIndC, c.loadB) },
	0x42: func(c *CPU) { sbc16(c, c.storeHL, c.loadHL, c.loadBC) },
	0x43: func(c *CPU) { ld16(c, c.store16IndImm, c.loadBC) },
	0x44: func(c *CPU) { neg(c) },
	0x45: func(c *CPU) { retn(c) },
	0x46: func(c *CPU) { im(c, 0) },
	0x47: func(c *CPU) { ld(c, c.storeI, c.loadA) },
	0x48: func(c *CPU) { in(c, c.storeC, c.loadIndC) },
	0x49: func(c *CPU) { ld(c, c.outIndC, c.loadC) },
	0x4a: func(c *CPU) { adc16(c, c.storeHL, c.loadHL, c.loadBC) },
	0x4b: func(c *CPU) { ld16(c, c.storeBC, c.load16IndImm) },
	0x4c: func(c *CPU) { neg(c) },
	0x4d: func(c *CPU) { reti(c) },
	0x4e: func(c *CPU) { im(c, 0) },
	0x4f: func(c *CPU) { ld(c, c.storeR, c.loadA) },
	0x50: func(c *CPU) { in(c, c.storeD, c.loadIndC) },
	0x51: func(c *CPU) { ld(c, c.outIndC, c.loadD) },
	0x52: func(c *CPU) { sbc16(c, c.storeHL, c.loadHL, c.loadDE) },
	0x53: func(c *CPU) { ld16(c, c.store16IndImm, c.loadDE) },
	0x54: func(c *CPU) { neg(c) },
	0x55: func(c *CPU) { retn(c) },
	0x56: func(c *CPU) { im(c, 1) },
	0x57: func(c *CPU) { ldair(c, c.loadI) },
	0x58: func(c *CPU) { in(c, c.storeE, c.loadIndC) },
	0x59: func(c *CPU) { ld(c, c.outIndC, c.loadE) },
	0x5a: func(c *CPU) { adc16(c, c.storeHL, c.loadHL, c.loadDE) },
	0x5b: func(c *CPU) { ld16(c, c.storeDE, c.load16IndImm) },
	0x5c: func(c *CPU) { neg(c) },
	0x5d: func(c *CPU) { retn(c) },
	0x5e: func(c *CPU) { im(c, 2) },
	0x5f: func(c *CPU) { ldair(c, c.loadR) },
	0x60: func(c *CPU) { in(c, c.storeH, c.loadIndC) },
	0x61: func(c *CPU) { ld(c, c.outIndC, c.loadH) },
	0x62: func(c *CPU) { sbc16(c, c.storeHL, c.loadHL, c.loadHL) },
	0x63: func(c *CPU) { ld16(c, c.store16IndImm, c.loadHL) },
	0x64: func(c *CPU) { neg(c) },
	0x65: func(c *CPU) { retn(c) },
	0x66: func(c *CPU) { im(c, 0) },
	0x67: func(c *CPU) { rrd(c) },
	0x68: func(c *CPU) { in(c, c.storeL, c.loadIndC) },
	0x69: func(c *CPU) { ld(c, c.outIndC, c.loadL) },
	0x6a: func(c *CPU) { adc16(c, c.storeHL, c.loadHL, c.loadHL) },
	0x6b: func(c *CPU) { ld16(c, c.storeHL, c.load16IndImm) },
	0x6c: func(c *CPU) { neg(c) },
	0x6d: func(c *CPU) { retn(c) },
	0x6e: func(c *CPU) { im(c, 0) },
	0x6f: func(c *CPU) { rld(c) },
	0x70: func(c *CPU) { in(c, c.storeNil, c.loadIndC) },
	0x71: func(c *CPU) { ld(c, c.outIndC, c.loadZero) },
	0x72: func(c *CPU) { sbc16(c, c.storeHL, c.loadHL, c.loadSP) },
	0x73: func(c *CPU) { ld16(c, c.store16IndImm, c.loadSP) },
	0x74: func(c *CPU) { neg(c) },
	0x75: func(c *CPU) { retn(c) },
	0x76: func(c *CPU) { im(c, 1) },
	0x78: func(c *CPU) { in(c, c.storeA, c.loadIndC) },
	0x79: func(c *CPU) { ld(c, c.outIndC, c.loadA) },
	0x7a: func(c *CPU) { adc16(c, c.storeHL, c.loadHL, c.loadSP) },
	0x7b: func(c *CPU) { ld16(c, c.storeSP, c.load16IndImm) },
	0x7c: func(c *CPU) { neg(c) },
	0x7d: func(c *CPU) { retn(c) },
	0x7e: func(c *CPU) { im(c, 2) },
	0xa0: func(c *CPU) { ldx(c, 1) },
	0xa1: func(c *CPU) { cpx(c, 1) },
	0xa2: func(c *CPU) { inx(c, 1) },
	0xa3: func(c *CPU) { outx(c, 1) },
	0xa8: func(c *CPU) { ldx(c, -1) },
	0xa9: func(c *CPU) { cpx(c, -1) },
	0xaa: func(c *CPU) { inx(c, -1) },
	0xab: func(c *CPU) { outx(c, -1) },
	0xb0: func(c *CPU) { ldxr(c, 1) },
	0xb1: func(c *CPU) { cpxr(c, 1) },
	0xb2: func(c *CPU) { inxr(c, 1) },
	0xb3: func(c *CPU) { outxr(c, 1) },
	0xb8: func(c *CPU) { ldxr(c, -1) },
	0xb9: func(c *CPU) { cpxr(c, -1) },
	0xba: func(c *CPU) { inxr(c, -1) },
	0xbb: func(c *CPU) { outxr(c, -1) },
}
var opcodesDD = map[uint8]func(c *CPU){
	0x09: func(c *CPU) { add16(c, c.storeIX, c.loadIX, c.loadBC) },
	0x19: func(c *CPU) { add16(c, c.storeIX, c.loadIX, c.loadDE) },
	0x21: func(c *CPU) { ld16(c, c.storeIX, c.loadImm16) },
	0x22: func(c *CPU) { ld16(c, c.store16IndImm, c.loadIX) },
	0x23: func(c *CPU) { inc16(c, c.storeIX, c.loadIX) },
	0x24: func(c *CPU) { inc(c, c.storeIXH, c.loadIXH) },
	0x25: func(c *CPU) { dec(c, c.storeIXH, c.loadIXH) },
	0x26: func(c *CPU) { ld(c, c.storeIXH, c.loadImm) },
	0x29: func(c *CPU) { add16(c, c.storeIX, c.loadIX, c.loadIX) },
	0x2a: func(c *CPU) { ld16(c, c.storeIX, c.load16IndImm) },
	0x2b: func(c *CPU) { dec16(c, c.storeIX, c.loadIX) },
	0x2c: func(c *CPU) { inc(c, c.storeIXL, c.loadIXL) },
	0x2d: func(c *CPU) { dec(c, c.storeIXL, c.loadIXL) },
	0x2e: func(c *CPU) { ld(c, c.storeIXL, c.loadImm) },
	0x34: func(c *CPU) { c.fetchd(); inc(c, c.storeIndIX, c.loadIndIX) },
	0x35: func(c *CPU) { c.fetchd(); dec(c, c.storeIndIX, c.loadIndIX) },
	0x36: func(c *CPU) { c.fetchd(); ld(c, c.storeIndIX, c.loadImm) },
	0x39: func(c *CPU) { add16(c, c.storeIX, c.loadIX, c.loadSP) },
	0x44: func(c *CPU) { ld(c, c.storeB, c.loadIXH) },
	0x45: func(c *CPU) { ld(c, c.storeB, c.loadIXL) },
	0x46: func(c *CPU) { c.fetchd(); ld(c, c.storeB, c.loadIndIX) },
	0x4c: func(c *CPU) { ld(c, c.storeC, c.loadIXH) },
	0x4d: func(c *CPU) { ld(c, c.storeC, c.loadIXL) },
	0x4e: func(c *CPU) { c.fetchd(); ld(c, c.storeC, c.loadIndIX) },
	0x54: func(c *CPU) { ld(c, c.storeD, c.loadIXH) },
	0x55: func(c *CPU) { ld(c, c.storeD, c.loadIXL) },
	0x56: func(c *CPU) { c.fetchd(); ld(c, c.storeD, c.loadIndIX) },
	0x5c: func(c *CPU) { ld(c, c.storeE, c.loadIXH) },
	0x5d: func(c *CPU) { ld(c, c.storeE, c.loadIXL) },
	0x5e: func(c *CPU) { c.fetchd(); ld(c, c.storeE, c.loadIndIX) },
	0x60: func(c *CPU) { ld(c, c.storeIXH, c.loadB) },
	0x61: func(c *CPU) { ld(c, c.storeIXH, c.loadC) },
	0x62: func(c *CPU) { ld(c, c.storeIXH, c.loadD) },
	0x63: func(c *CPU) { ld(c, c.storeIXH, c.loadE) },
	0x64: func(c *CPU) { ld(c, c.storeIXH, c.loadIXH) },
	0x65: func(c *CPU) { ld(c, c.storeIXH, c.loadIXL) },
	0x66: func(c *CPU) { c.fetchd(); ld(c, c.storeH, c.loadIndIX) },
	0x67: func(c *CPU) { ld(c, c.storeIXH, c.loadA) },
	0x68: func(c *CPU) { ld(c, c.storeIXL, c.loadB) },
	0x69: func(c *CPU) { ld(c, c.storeIXL, c.loadC) },
	0x6a: func(c *CPU) { ld(c, c.storeIXL, c.loadD) },
	0x6b: func(c *CPU) { ld(c, c.storeIXL, c.loadE) },
	0x6c: func(c *CPU) { ld(c, c.storeIXL, c.loadIXH) },
	0x6d: func(c *CPU) { ld(c, c.storeIXL, c.loadIXL) },
	0x6e: func(c *CPU) { c.fetchd(); ld(c, c.storeL, c.loadIndIX) },
	0x6f: func(c *CPU) { ld(c, c.storeIXL, c.loadA) },
	0x70: func(c *CPU) { c.fetchd(); ld(c, c.storeIndIX, c.loadB) },
	0x71: func(c *CPU) { c.fetchd(); ld(c, c.storeIndIX, c.loadC) },
	0x72: func(c *CPU) { c.fetchd(); ld(c, c.storeIndIX, c.loadD) },
	0x73: func(c *CPU) { c.fetchd(); ld(c, c.storeIndIX, c.loadE) },
	0x74: func(c *CPU) { c.fetchd(); ld(c, c.storeIndIX, c.loadH) },
	0x75: func(c *CPU) { c.fetchd(); ld(c, c.storeIndIX, c.loadL) },
	0x77: func(c *CPU) { c.fetchd(); ld(c, c.storeIndIX, c.loadA) },
	0x7c: func(c *CPU) { ld(c, c.storeA, c.loadIXH) },
	0x7d: func(c *CPU) { ld(c, c.storeA, c.loadIXL) },
	0x7e: func(c *CPU) { c.fetchd(); ld(c, c.storeA, c.loadIndIX) },
	0x84: func(c *CPU) { add(c, c.loadA, c.loadIXH) },
	0x85: func(c *CPU) { add(c, c.loadA, c.loadIXL) },
	0x86: func(c *CPU) { c.fetchd(); add(c, c.loadA, c.loadIndIX) },
	0x8c: func(c *CPU) { adc(c, c.loadA, c.loadIXH) },
	0x8d: func(c *CPU) { adc(c, c.loadA, c.loadIXL) },
	0x8e: func(c *CPU) { c.fetchd(); adc(c, c.loadA, c.loadIndIX) },
	0x94: func(c *CPU) { sub(c, c.loadA, c.loadIXH) },
	0x95: func(c *CPU) { sub(c, c.loadA, c.loadIXL) },
	0x96: func(c *CPU) { c.fetchd(); sub(c, c.loadA, c.loadIndIX) },
	0x9c: func(c *CPU) { sbc(c, c.loadA, c.loadIXH) },
	0x9d: func(c *CPU) { sbc(c, c.loadA, c.loadIXL) },
	0x9e: func(c *CPU) { c.fetchd(); sbc(c, c.loadA, c.loadIndIX) },
	0xa4: func(c *CPU) { and(c, c.loadIXH) },
	0xa5: func(c *CPU) { and(c, c.loadIXL) },
	0xa6: func(c *CPU) { c.fetchd(); and(c, c.loadIndIX) },
	0xac: func(c *CPU) { xor(c, c.loadIXH) },
	0xad: func(c *CPU) { xor(c, c.loadIXL) },
	0xae: func(c *CPU) { c.fetchd(); xor(c, c.loadIndIX) },
	0xb4: func(c *CPU) { or(c, c.loadIXH) },
	0xb5: func(c *CPU) { or(c, c.loadIXL) },
	0xb6: func(c *CPU) { c.fetchd(); or(c, c.loadIndIX) },
	0xbc: func(c *CPU) { cp(c, c.loadIXH) },
	0xbd: func(c *CPU) { cp(c, c.loadIXL) },
	0xbe: func(c *CPU) { c.fetchd(); cp(c, c.loadIndIX) },
	0xe1: func(c *CPU) { pop(c, c.storeIX) },
	0xe3: func(c *CPU) { ex(c, c.load16IndSP, c.store16IndSP, c.loadIX, c.storeIX) },
	0xe5: func(c *CPU) { push(c, c.loadIX) },
	0xe9: func(c *CPU) { jpa(c, c.loadIX) },
	0xf9: func(c *CPU) { ld16(c, c.storeSP, c.loadIX) },
}
var opcodesFD = map[uint8]func(c *CPU){
	0x09: func(c *CPU) { add16(c, c.storeIY, c.loadIY, c.loadBC) },
	0x19: func(c *CPU) { add16(c, c.storeIY, c.loadIY, c.loadDE) },
	0x21: func(c *CPU) { ld16(c, c.storeIY, c.loadImm16) },
	0x22: func(c *CPU) { ld16(c, c.store16IndImm, c.loadIY) },
	0x23: func(c *CPU) { inc16(c, c.storeIY, c.loadIY) },
	0x24: func(c *CPU) { inc(c, c.storeIYH, c.loadIYH) },
	0x25: func(c *CPU) { dec(c, c.storeIYH, c.loadIYH) },
	0x26: func(c *CPU) { ld(c, c.storeIYH, c.loadImm) },
	0x29: func(c *CPU) { add16(c, c.storeIY, c.loadIY, c.loadIY) },
	0x2a: func(c *CPU) { ld16(c, c.storeIY, c.load16IndImm) },
	0x2b: func(c *CPU) { dec16(c, c.storeIY, c.loadIY) },
	0x2c: func(c *CPU) { inc(c, c.storeIYL, c.loadIYL) },
	0x2d: func(c *CPU) { dec(c, c.storeIYL, c.loadIYL) },
	0x2e: func(c *CPU) { ld(c, c.storeIYL, c.loadImm) },
	0x34: func(c *CPU) { c.fetchd(); inc(c, c.storeIndIY, c.loadIndIY) },
	0x35: func(c *CPU) { c.fetchd(); dec(c, c.storeIndIY, c.loadIndIY) },
	0x36: func(c *CPU) { c.fetchd(); ld(c, c.storeIndIY, c.loadImm) },
	0x39: func(c *CPU) { add16(c, c.storeIY, c.loadIY, c.loadSP) },
	0x44: func(c *CPU) { ld(c, c.storeB, c.loadIYH) },
	0x45: func(c *CPU) { ld(c, c.storeB, c.loadIYL) },
	0x46: func(c *CPU) { c.fetchd(); ld(c, c.storeB, c.loadIndIY) },
	0x4c: func(c *CPU) { ld(c, c.storeC, c.loadIYH) },
	0x4d: func(c *CPU) { ld(c, c.storeC, c.loadIYL) },
	0x4e: func(c *CPU) { c.fetchd(); ld(c, c.storeC, c.loadIndIY) },
	0x54: func(c *CPU) { ld(c, c.storeD, c.loadIYH) },
	0x55: func(c *CPU) { ld(c, c.storeD, c.loadIYL) },
	0x56: func(c *CPU) { c.fetchd(); ld(c, c.storeD, c.loadIndIY) },
	0x5c: func(c *CPU) { ld(c, c.storeE, c.loadIYH) },
	0x5d: func(c *CPU) { ld(c, c.storeE, c.loadIYL) },
	0x5e: func(c *CPU) { c.fetchd(); ld(c, c.storeE, c.loadIndIY) },
	0x60: func(c *CPU) { ld(c, c.storeIYH, c.loadB) },
	0x61: func(c *CPU) { ld(c, c.storeIYH, c.loadC) },
	0x62: func(c *CPU) { ld(c, c.storeIYH, c.loadD) },
	0x63: func(c *CPU) { ld(c, c.storeIYH, c.loadE) },
	0x64: func(c *CPU) { ld(c, c.storeIYH, c.loadIYH) },
	0x65: func(c *CPU) { ld(c, c.storeIYH, c.loadIYL) },
	0x66: func(c *CPU) { c.fetchd(); ld(c, c.storeH, c.loadIndIY) },
	0x67: func(c *CPU) { ld(c, c.storeIYH, c.loadA) },
	0x68: func(c *CPU) { ld(c, c.storeIYL, c.loadB) },
	0x69: func(c *CPU) { ld(c, c.storeIYL, c.loadC) },
	0x6a: func(c *CPU) { ld(c, c.storeIYL, c.loadD) },
	0x6b: func(c *CPU) { ld(c, c.storeIYL, c.loadE) },
	0x6c: func(c *CPU) { ld(c, c.storeIYL, c.loadIYH) },
	0x6d: func(c *CPU) { ld(c, c.storeIYL, c.loadIYL) },
	0x6e: func(c *CPU) { c.fetchd(); ld(c, c.storeL, c.loadIndIY) },
	0x6f: func(c *CPU) { ld(c, c.storeIYL, c.loadA) },
	0x70: func(c *CPU) { c.fetchd(); ld(c, c.storeIndIY, c.loadB) },
	0x71: func(c *CPU) { c.fetchd(); ld(c, c.storeIndIY, c.loadC) },
	0x72: func(c *CPU) { c.fetchd(); ld(c, c.storeIndIY, c.loadD) },
	0x73: func(c *CPU) { c.fetchd(); ld(c, c.storeIndIY, c.loadE) },
	0x74: func(c *CPU) { c.fetchd(); ld(c, c.storeIndIY, c.loadH) },
	0x75: func(c *CPU) { c.fetchd(); ld(c, c.storeIndIY, c.loadL) },
	0x77: func(c *CPU) { c.fetchd(); ld(c, c.storeIndIY, c.loadA) },
	0x7c: func(c *CPU) { ld(c, c.storeA, c.loadIYH) },
	0x7d: func(c *CPU) { ld(c, c.storeA, c.loadIYL) },
	0x7e: func(c *CPU) { c.fetchd(); ld(c, c.storeA, c.loadIndIY) },
	0x84: func(c *CPU) { add(c, c.loadA, c.loadIYH) },
	0x85: func(c *CPU) { add(c, c.loadA, c.loadIYL) },
	0x86: func(c *CPU) { c.fetchd(); add(c, c.loadA, c.loadIndIY) },
	0x8c: func(c *CPU) { adc(c, c.loadA, c.loadIYH) },
	0x8d: func(c *CPU) { adc(c, c.loadA, c.loadIYL) },
	0x8e: func(c *CPU) { c.fetchd(); adc(c, c.loadA, c.loadIndIY) },
	0x94: func(c *CPU) { sub(c, c.loadA, c.loadIYH) },
	0x95: func(c *CPU) { sub(c, c.loadA, c.loadIYL) },
	0x96: func(c *CPU) { c.fetchd(); sub(c, c.loadA, c.loadIndIY) },
	0x9c: func(c *CPU) { sbc(c, c.loadA, c.loadIYH) },
	0x9d: func(c *CPU) { sbc(c, c.loadA, c.loadIYL) },
	0x9e: func(c *CPU) { c.fetchd(); sbc(c, c.loadA, c.loadIndIY) },
	0xa4: func(c *CPU) { and(c, c.loadIYH) },
	0xa5: func(c *CPU) { and(c, c.loadIYL) },
	0xa6: func(c *CPU) { c.fetchd(); and(c, c.loadIndIY) },
	0xac: func(c *CPU) { xor(c, c.loadIYH) },
	0xad: func(c *CPU) { xor(c, c.loadIYL) },
	0xae: func(c *CPU) { c.fetchd(); xor(c, c.loadIndIY) },
	0xb4: func(c *CPU) { or(c, c.loadIYH) },
	0xb5: func(c *CPU) { or(c, c.loadIYL) },
	0xb6: func(c *CPU) { c.fetchd(); or(c, c.loadIndIY) },
	0xbc: func(c *CPU) { cp(c, c.loadIYH) },
	0xbd: func(c *CPU) { cp(c, c.loadIYL) },
	0xbe: func(c *CPU) { c.fetchd(); cp(c, c.loadIndIY) },
	0xe1: func(c *CPU) { pop(c, c.storeIY) },
	0xe3: func(c *CPU) { ex(c, c.load16IndSP, c.store16IndSP, c.loadIY, c.storeIY) },
	0xe5: func(c *CPU) { push(c, c.loadIY) },
	0xe9: func(c *CPU) { jpa(c, c.loadIY) },
	0xf9: func(c *CPU) { ld16(c, c.storeSP, c.loadIY) },
}
var opcodesDDCB = map[uint8]func(c *CPU){
	0x00: func(c *CPU) { rlc(c, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0x01: func(c *CPU) { rlc(c, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0x02: func(c *CPU) { rlc(c, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0x03: func(c *CPU) { rlc(c, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0x04: func(c *CPU) { rlc(c, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0x05: func(c *CPU) { rlc(c, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0x06: func(c *CPU) { rlc(c, c.storeLastInd, c.loadIndIX) },
	0x07: func(c *CPU) { rlc(c, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0x08: func(c *CPU) { rrc(c, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0x09: func(c *CPU) { rrc(c, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0x0a: func(c *CPU) { rrc(c, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0x0b: func(c *CPU) { rrc(c, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0x0c: func(c *CPU) { rrc(c, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0x0d: func(c *CPU) { rrc(c, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0x0e: func(c *CPU) { rrc(c, c.storeLastInd, c.loadIndIX) },
	0x0f: func(c *CPU) { rrc(c, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0x10: func(c *CPU) { rl(c, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0x11: func(c *CPU) { rl(c, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0x12: func(c *CPU) { rl(c, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0x13: func(c *CPU) { rl(c, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0x14: func(c *CPU) { rl(c, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0x15: func(c *CPU) { rl(c, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0x16: func(c *CPU) { rl(c, c.storeLastInd, c.loadIndIX) },
	0x17: func(c *CPU) { rl(c, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0x18: func(c *CPU) { rr(c, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0x19: func(c *CPU) { rr(c, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0x1a: func(c *CPU) { rr(c, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0x1b: func(c *CPU) { rr(c, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0x1c: func(c *CPU) { rr(c, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0x1d: func(c *CPU) { rr(c, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0x1e: func(c *CPU) { rr(c, c.storeLastInd, c.loadIndIX) },
	0x1f: func(c *CPU) { rr(c, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0x20: func(c *CPU) { sla(c, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0x21: func(c *CPU) { sla(c, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0x22: func(c *CPU) { sla(c, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0x23: func(c *CPU) { sla(c, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0x24: func(c *CPU) { sla(c, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0x25: func(c *CPU) { sla(c, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0x26: func(c *CPU) { sla(c, c.storeLastInd, c.loadIndIX) },
	0x27: func(c *CPU) { sla(c, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0x28: func(c *CPU) { sra(c, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0x29: func(c *CPU) { sra(c, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0x2a: func(c *CPU) { sra(c, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0x2b: func(c *CPU) { sra(c, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0x2c: func(c *CPU) { sra(c, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0x2d: func(c *CPU) { sra(c, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0x2e: func(c *CPU) { sra(c, c.storeLastInd, c.loadIndIX) },
	0x2f: func(c *CPU) { sra(c, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0x30: func(c *CPU) { sll(c, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0x31: func(c *CPU) { sll(c, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0x32: func(c *CPU) { sll(c, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0x33: func(c *CPU) { sll(c, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0x34: func(c *CPU) { sll(c, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0x35: func(c *CPU) { sll(c, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0x36: func(c *CPU) { sll(c, c.storeLastInd, c.loadIndIX) },
	0x37: func(c *CPU) { sll(c, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0x38: func(c *CPU) { srl(c, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0x39: func(c *CPU) { srl(c, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0x3a: func(c *CPU) { srl(c, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0x3b: func(c *CPU) { srl(c, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0x3c: func(c *CPU) { srl(c, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0x3d: func(c *CPU) { srl(c, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0x3e: func(c *CPU) { srl(c, c.storeLastInd, c.loadIndIX) },
	0x3f: func(c *CPU) { srl(c, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0x40: func(c *CPU) { biti(c, 0, c.loadIndIX) },
	0x41: func(c *CPU) { biti(c, 0, c.loadIndIX) },
	0x42: func(c *CPU) { biti(c, 0, c.loadIndIX) },
	0x43: func(c *CPU) { biti(c, 0, c.loadIndIX) },
	0x44: func(c *CPU) { biti(c, 0, c.loadIndIX) },
	0x45: func(c *CPU) { biti(c, 0, c.loadIndIX) },
	0x46: func(c *CPU) { biti(c, 0, c.loadIndIX) },
	0x47: func(c *CPU) { biti(c, 0, c.loadIndIX) },
	0x48: func(c *CPU) { biti(c, 1, c.loadIndIX) },
	0x49: func(c *CPU) { biti(c, 1, c.loadIndIX) },
	0x4a: func(c *CPU) { biti(c, 1, c.loadIndIX) },
	0x4b: func(c *CPU) { biti(c, 1, c.loadIndIX) },
	0x4c: func(c *CPU) { biti(c, 1, c.loadIndIX) },
	0x4d: func(c *CPU) { biti(c, 1, c.loadIndIX) },
	0x4e: func(c *CPU) { biti(c, 1, c.loadIndIX) },
	0x4f: func(c *CPU) { biti(c, 1, c.loadIndIX) },
	0x50: func(c *CPU) { biti(c, 2, c.loadIndIX) },
	0x51: func(c *CPU) { biti(c, 2, c.loadIndIX) },
	0x52: func(c *CPU) { biti(c, 2, c.loadIndIX) },
	0x53: func(c *CPU) { biti(c, 2, c.loadIndIX) },
	0x54: func(c *CPU) { biti(c, 2, c.loadIndIX) },
	0x55: func(c *CPU) { biti(c, 2, c.loadIndIX) },
	0x56: func(c *CPU) { biti(c, 2, c.loadIndIX) },
	0x57: func(c *CPU) { biti(c, 2, c.loadIndIX) },
	0x58: func(c *CPU) { biti(c, 3, c.loadIndIX) },
	0x59: func(c *CPU) { biti(c, 3, c.loadIndIX) },
	0x5a: func(c *CPU) { biti(c, 3, c.loadIndIX) },
	0x5b: func(c *CPU) { biti(c, 3, c.loadIndIX) },
	0x5c: func(c *CPU) { biti(c, 3, c.loadIndIX) },
	0x5d: func(c *CPU) { biti(c, 3, c.loadIndIX) },
	0x5e: func(c *CPU) { biti(c, 3, c.loadIndIX) },
	0x5f: func(c *CPU) { biti(c, 3, c.loadIndIX) },
	0x60: func(c *CPU) { biti(c, 4, c.loadIndIX) },
	0x61: func(c *CPU) { biti(c, 4, c.loadIndIX) },
	0x62: func(c *CPU) { biti(c, 4, c.loadIndIX) },
	0x63: func(c *CPU) { biti(c, 4, c.loadIndIX) },
	0x64: func(c *CPU) { biti(c, 4, c.loadIndIX) },
	0x65: func(c *CPU) { biti(c, 4, c.loadIndIX) },
	0x66: func(c *CPU) { biti(c, 4, c.loadIndIX) },
	0x67: func(c *CPU) { biti(c, 4, c.loadIndIX) },
	0x68: func(c *CPU) { biti(c, 5, c.loadIndIX) },
	0x69: func(c *CPU) { biti(c, 5, c.loadIndIX) },
	0x6a: func(c *CPU) { biti(c, 5, c.loadIndIX) },
	0x6b: func(c *CPU) { biti(c, 5, c.loadIndIX) },
	0x6c: func(c *CPU) { biti(c, 5, c.loadIndIX) },
	0x6d: func(c *CPU) { biti(c, 5, c.loadIndIX) },
	0x6e: func(c *CPU) { biti(c, 5, c.loadIndIX) },
	0x6f: func(c *CPU) { biti(c, 5, c.loadIndIX) },
	0x70: func(c *CPU) { biti(c, 6, c.loadIndIX) },
	0x71: func(c *CPU) { biti(c, 6, c.loadIndIX) },
	0x72: func(c *CPU) { biti(c, 6, c.loadIndIX) },
	0x73: func(c *CPU) { biti(c, 6, c.loadIndIX) },
	0x74: func(c *CPU) { biti(c, 6, c.loadIndIX) },
	0x75: func(c *CPU) { biti(c, 6, c.loadIndIX) },
	0x76: func(c *CPU) { biti(c, 6, c.loadIndIX) },
	0x77: func(c *CPU) { biti(c, 6, c.loadIndIX) },
	0x78: func(c *CPU) { biti(c, 7, c.loadIndIX) },
	0x79: func(c *CPU) { biti(c, 7, c.loadIndIX) },
	0x7a: func(c *CPU) { biti(c, 7, c.loadIndIX) },
	0x7b: func(c *CPU) { biti(c, 7, c.loadIndIX) },
	0x7c: func(c *CPU) { biti(c, 7, c.loadIndIX) },
	0x7d: func(c *CPU) { biti(c, 7, c.loadIndIX) },
	0x7e: func(c *CPU) { biti(c, 7, c.loadIndIX) },
	0x7f: func(c *CPU) { biti(c, 7, c.loadIndIX) },
	0x80: func(c *CPU) { res(c, 0, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0x81: func(c *CPU) { res(c, 0, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0x82: func(c *CPU) { res(c, 0, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0x83: func(c *CPU) { res(c, 0, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0x84: func(c *CPU) { res(c, 0, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0x85: func(c *CPU) { res(c, 0, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0x86: func(c *CPU) { res(c, 0, c.storeLastInd, c.loadIndIX) },
	0x87: func(c *CPU) { res(c, 0, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0x88: func(c *CPU) { res(c, 1, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0x89: func(c *CPU) { res(c, 1, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0x8a: func(c *CPU) { res(c, 1, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0x8b: func(c *CPU) { res(c, 1, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0x8c: func(c *CPU) { res(c, 1, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0x8d: func(c *CPU) { res(c, 1, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0x8e: func(c *CPU) { res(c, 1, c.storeLastInd, c.loadIndIX) },
	0x8f: func(c *CPU) { res(c, 1, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0x90: func(c *CPU) { res(c, 2, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0x91: func(c *CPU) { res(c, 2, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0x92: func(c *CPU) { res(c, 2, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0x93: func(c *CPU) { res(c, 2, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0x94: func(c *CPU) { res(c, 2, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0x95: func(c *CPU) { res(c, 2, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0x96: func(c *CPU) { res(c, 2, c.storeLastInd, c.loadIndIX) },
	0x97: func(c *CPU) { res(c, 2, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0x98: func(c *CPU) { res(c, 3, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0x99: func(c *CPU) { res(c, 3, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0x9a: func(c *CPU) { res(c, 3, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0x9b: func(c *CPU) { res(c, 3, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0x9c: func(c *CPU) { res(c, 3, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0x9d: func(c *CPU) { res(c, 3, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0x9e: func(c *CPU) { res(c, 3, c.storeLastInd, c.loadIndIX) },
	0x9f: func(c *CPU) { res(c, 3, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0xa0: func(c *CPU) { res(c, 4, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0xa1: func(c *CPU) { res(c, 4, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0xa2: func(c *CPU) { res(c, 4, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0xa3: func(c *CPU) { res(c, 4, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0xa4: func(c *CPU) { res(c, 4, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0xa5: func(c *CPU) { res(c, 4, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0xa6: func(c *CPU) { res(c, 4, c.storeLastInd, c.loadIndIX) },
	0xa7: func(c *CPU) { res(c, 4, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0xa8: func(c *CPU) { res(c, 5, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0xa9: func(c *CPU) { res(c, 5, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0xaa: func(c *CPU) { res(c, 5, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0xab: func(c *CPU) { res(c, 5, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0xac: func(c *CPU) { res(c, 5, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0xad: func(c *CPU) { res(c, 5, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0xae: func(c *CPU) { res(c, 5, c.storeLastInd, c.loadIndIX) },
	0xaf: func(c *CPU) { res(c, 5, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0xb0: func(c *CPU) { res(c, 6, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0xb1: func(c *CPU) { res(c, 6, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0xb2: func(c *CPU) { res(c, 6, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0xb3: func(c *CPU) { res(c, 6, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0xb4: func(c *CPU) { res(c, 6, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0xb5: func(c *CPU) { res(c, 6, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0xb6: func(c *CPU) { res(c, 6, c.storeLastInd, c.loadIndIX) },
	0xb7: func(c *CPU) { res(c, 6, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0xb8: func(c *CPU) { res(c, 7, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0xb9: func(c *CPU) { res(c, 7, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0xba: func(c *CPU) { res(c, 7, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0xbb: func(c *CPU) { res(c, 7, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0xbc: func(c *CPU) { res(c, 7, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0xbd: func(c *CPU) { res(c, 7, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0xbe: func(c *CPU) { res(c, 7, c.storeLastInd, c.loadIndIX) },
	0xbf: func(c *CPU) { res(c, 7, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0xc0: func(c *CPU) { set(c, 0, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0xc1: func(c *CPU) { set(c, 0, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0xc2: func(c *CPU) { set(c, 0, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0xc3: func(c *CPU) { set(c, 0, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0xc4: func(c *CPU) { set(c, 0, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0xc5: func(c *CPU) { set(c, 0, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0xc6: func(c *CPU) { set(c, 0, c.storeLastInd, c.loadIndIX) },
	0xc7: func(c *CPU) { set(c, 0, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0xc8: func(c *CPU) { set(c, 1, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0xc9: func(c *CPU) { set(c, 1, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0xca: func(c *CPU) { set(c, 1, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0xcb: func(c *CPU) { set(c, 1, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0xcc: func(c *CPU) { set(c, 1, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0xcd: func(c *CPU) { set(c, 1, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0xce: func(c *CPU) { set(c, 1, c.storeLastInd, c.loadIndIX) },
	0xcf: func(c *CPU) { set(c, 1, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0xd0: func(c *CPU) { set(c, 2, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0xd1: func(c *CPU) { set(c, 2, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0xd2: func(c *CPU) { set(c, 2, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0xd3: func(c *CPU) { set(c, 2, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0xd4: func(c *CPU) { set(c, 2, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0xd5: func(c *CPU) { set(c, 2, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0xd6: func(c *CPU) { set(c, 2, c.storeLastInd, c.loadIndIX) },
	0xd7: func(c *CPU) { set(c, 2, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0xd8: func(c *CPU) { set(c, 3, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0xd9: func(c *CPU) { set(c, 3, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0xda: func(c *CPU) { set(c, 3, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0xdb: func(c *CPU) { set(c, 3, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0xdc: func(c *CPU) { set(c, 3, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0xdd: func(c *CPU) { set(c, 3, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0xde: func(c *CPU) { set(c, 3, c.storeLastInd, c.loadIndIX) },
	0xdf: func(c *CPU) { set(c, 3, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0xe0: func(c *CPU) { set(c, 4, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0xe1: func(c *CPU) { set(c, 4, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0xe2: func(c *CPU) { set(c, 4, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0xe3: func(c *CPU) { set(c, 4, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0xe4: func(c *CPU) { set(c, 4, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0xe5: func(c *CPU) { set(c, 4, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0xe6: func(c *CPU) { set(c, 4, c.storeLastInd, c.loadIndIX) },
	0xe7: func(c *CPU) { set(c, 4, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0xe8: func(c *CPU) { set(c, 5, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0xe9: func(c *CPU) { set(c, 5, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0xea: func(c *CPU) { set(c, 5, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0xeb: func(c *CPU) { set(c, 5, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0xec: func(c *CPU) { set(c, 5, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0xed: func(c *CPU) { set(c, 5, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0xee: func(c *CPU) { set(c, 5, c.storeLastInd, c.loadIndIX) },
	0xef: func(c *CPU) { set(c, 5, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0xf0: func(c *CPU) { set(c, 6, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0xf1: func(c *CPU) { set(c, 6, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0xf2: func(c *CPU) { set(c, 6, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0xf3: func(c *CPU) { set(c, 6, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0xf4: func(c *CPU) { set(c, 6, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0xf5: func(c *CPU) { set(c, 6, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0xf6: func(c *CPU) { set(c, 6, c.storeLastInd, c.loadIndIX) },
	0xf7: func(c *CPU) { set(c, 6, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
	0xf8: func(c *CPU) { set(c, 7, c.storeB, c.loadIndIX); ld(c, c.storeLastInd, c.loadB) },
	0xf9: func(c *CPU) { set(c, 7, c.storeC, c.loadIndIX); ld(c, c.storeLastInd, c.loadC) },
	0xfa: func(c *CPU) { set(c, 7, c.storeD, c.loadIndIX); ld(c, c.storeLastInd, c.loadD) },
	0xfb: func(c *CPU) { set(c, 7, c.storeE, c.loadIndIX); ld(c, c.storeLastInd, c.loadE) },
	0xfc: func(c *CPU) { set(c, 7, c.storeH, c.loadIndIX); ld(c, c.storeLastInd, c.loadH) },
	0xfd: func(c *CPU) { set(c, 7, c.storeL, c.loadIndIX); ld(c, c.storeLastInd, c.loadL) },
	0xfe: func(c *CPU) { set(c, 7, c.storeLastInd, c.loadIndIX) },
	0xff: func(c *CPU) { set(c, 7, c.storeA, c.loadIndIX); ld(c, c.storeLastInd, c.loadA) },
}
var opcodesFDCB = map[uint8]func(c *CPU){
	0x00: func(c *CPU) { rlc(c, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0x01: func(c *CPU) { rlc(c, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0x02: func(c *CPU) { rlc(c, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0x03: func(c *CPU) { rlc(c, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0x04: func(c *CPU) { rlc(c, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0x05: func(c *CPU) { rlc(c, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0x06: func(c *CPU) { rlc(c, c.storeLastInd, c.loadIndIY) },
	0x07: func(c *CPU) { rlc(c, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0x08: func(c *CPU) { rrc(c, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0x09: func(c *CPU) { rrc(c, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0x0a: func(c *CPU) { rrc(c, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0x0b: func(c *CPU) { rrc(c, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0x0c: func(c *CPU) { rrc(c, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0x0d: func(c *CPU) { rrc(c, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0x0e: func(c *CPU) { rrc(c, c.storeLastInd, c.loadIndIY) },
	0x0f: func(c *CPU) { rrc(c, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0x10: func(c *CPU) { rl(c, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0x11: func(c *CPU) { rl(c, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0x12: func(c *CPU) { rl(c, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0x13: func(c *CPU) { rl(c, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0x14: func(c *CPU) { rl(c, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0x15: func(c *CPU) { rl(c, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0x16: func(c *CPU) { rl(c, c.storeLastInd, c.loadIndIY) },
	0x17: func(c *CPU) { rl(c, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0x18: func(c *CPU) { rr(c, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0x19: func(c *CPU) { rr(c, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0x1a: func(c *CPU) { rr(c, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0x1b: func(c *CPU) { rr(c, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0x1c: func(c *CPU) { rr(c, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0x1d: func(c *CPU) { rr(c, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0x1e: func(c *CPU) { rr(c, c.storeLastInd, c.loadIndIY) },
	0x1f: func(c *CPU) { rr(c, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0x20: func(c *CPU) { sla(c, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0x21: func(c *CPU) { sla(c, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0x22: func(c *CPU) { sla(c, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0x23: func(c *CPU) { sla(c, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0x24: func(c *CPU) { sla(c, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0x25: func(c *CPU) { sla(c, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0x26: func(c *CPU) { sla(c, c.storeLastInd, c.loadIndIY) },
	0x27: func(c *CPU) { sla(c, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0x28: func(c *CPU) { sra(c, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0x29: func(c *CPU) { sra(c, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0x2a: func(c *CPU) { sra(c, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0x2b: func(c *CPU) { sra(c, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0x2c: func(c *CPU) { sra(c, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0x2d: func(c *CPU) { sra(c, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0x2e: func(c *CPU) { sra(c, c.storeLastInd, c.loadIndIY) },
	0x2f: func(c *CPU) { sra(c, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0x30: func(c *CPU) { sll(c, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0x31: func(c *CPU) { sll(c, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0x32: func(c *CPU) { sll(c, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0x33: func(c *CPU) { sll(c, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0x34: func(c *CPU) { sll(c, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0x35: func(c *CPU) { sll(c, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0x36: func(c *CPU) { sll(c, c.storeLastInd, c.loadIndIY) },
	0x37: func(c *CPU) { sll(c, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0x38: func(c *CPU) { srl(c, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0x39: func(c *CPU) { srl(c, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0x3a: func(c *CPU) { srl(c, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0x3b: func(c *CPU) { srl(c, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0x3c: func(c *CPU) { srl(c, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0x3d: func(c *CPU) { srl(c, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0x3e: func(c *CPU) { srl(c, c.storeLastInd, c.loadIndIY) },
	0x3f: func(c *CPU) { srl(c, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0x40: func(c *CPU) { biti(c, 0, c.loadIndIY) },
	0x41: func(c *CPU) { biti(c, 0, c.loadIndIY) },
	0x42: func(c *CPU) { biti(c, 0, c.loadIndIY) },
	0x43: func(c *CPU) { biti(c, 0, c.loadIndIY) },
	0x44: func(c *CPU) { biti(c, 0, c.loadIndIY) },
	0x45: func(c *CPU) { biti(c, 0, c.loadIndIY) },
	0x46: func(c *CPU) { biti(c, 0, c.loadIndIY) },
	0x47: func(c *CPU) { biti(c, 0, c.loadIndIY) },
	0x48: func(c *CPU) { biti(c, 1, c.loadIndIY) },
	0x49: func(c *CPU) { biti(c, 1, c.loadIndIY) },
	0x4a: func(c *CPU) { biti(c, 1, c.loadIndIY) },
	0x4b: func(c *CPU) { biti(c, 1, c.loadIndIY) },
	0x4c: func(c *CPU) { biti(c, 1, c.loadIndIY) },
	0x4d: func(c *CPU) { biti(c, 1, c.loadIndIY) },
	0x4e: func(c *CPU) { biti(c, 1, c.loadIndIY) },
	0x4f: func(c *CPU) { biti(c, 1, c.loadIndIY) },
	0x50: func(c *CPU) { biti(c, 2, c.loadIndIY) },
	0x51: func(c *CPU) { biti(c, 2, c.loadIndIY) },
	0x52: func(c *CPU) { biti(c, 2, c.loadIndIY) },
	0x53: func(c *CPU) { biti(c, 2, c.loadIndIY) },
	0x54: func(c *CPU) { biti(c, 2, c.loadIndIY) },
	0x55: func(c *CPU) { biti(c, 2, c.loadIndIY) },
	0x56: func(c *CPU) { biti(c, 2, c.loadIndIY) },
	0x57: func(c *CPU) { biti(c, 2, c.loadIndIY) },
	0x58: func(c *CPU) { biti(c, 3, c.loadIndIY) },
	0x59: func(c *CPU) { biti(c, 3, c.loadIndIY) },
	0x5a: func(c *CPU) { biti(c, 3, c.loadIndIY) },
	0x5b: func(c *CPU) { biti(c, 3, c.loadIndIY) },
	0x5c: func(c *CPU) { biti(c, 3, c.loadIndIY) },
	0x5d: func(c *CPU) { biti(c, 3, c.loadIndIY) },
	0x5e: func(c *CPU) { biti(c, 3, c.loadIndIY) },
	0x5f: func(c *CPU) { biti(c, 3, c.loadIndIY) },
	0x60: func(c *CPU) { biti(c, 4, c.loadIndIY) },
	0x61: func(c *CPU) { biti(c, 4, c.loadIndIY) },
	0x62: func(c *CPU) { biti(c, 4, c.loadIndIY) },
	0x63: func(c *CPU) { biti(c, 4, c.loadIndIY) },
	0x64: func(c *CPU) { biti(c, 4, c.loadIndIY) },
	0x65: func(c *CPU) { biti(c, 4, c.loadIndIY) },
	0x66: func(c *CPU) { biti(c, 4, c.loadIndIY) },
	0x67: func(c *CPU) { biti(c, 4, c.loadIndIY) },
	0x68: func(c *CPU) { biti(c, 5, c.loadIndIY) },
	0x69: func(c *CPU) { biti(c, 5, c.loadIndIY) },
	0x6a: func(c *CPU) { biti(c, 5, c.loadIndIY) },
	0x6b: func(c *CPU) { biti(c, 5, c.loadIndIY) },
	0x6c: func(c *CPU) { biti(c, 5, c.loadIndIY) },
	0x6d: func(c *CPU) { biti(c, 5, c.loadIndIY) },
	0x6e: func(c *CPU) { biti(c, 5, c.loadIndIY) },
	0x6f: func(c *CPU) { biti(c, 5, c.loadIndIY) },
	0x70: func(c *CPU) { biti(c, 6, c.loadIndIY) },
	0x71: func(c *CPU) { biti(c, 6, c.loadIndIY) },
	0x72: func(c *CPU) { biti(c, 6, c.loadIndIY) },
	0x73: func(c *CPU) { biti(c, 6, c.loadIndIY) },
	0x74: func(c *CPU) { biti(c, 6, c.loadIndIY) },
	0x75: func(c *CPU) { biti(c, 6, c.loadIndIY) },
	0x76: func(c *CPU) { biti(c, 6, c.loadIndIY) },
	0x77: func(c *CPU) { biti(c, 6, c.loadIndIY) },
	0x78: func(c *CPU) { biti(c, 7, c.loadIndIY) },
	0x79: func(c *CPU) { biti(c, 7, c.loadIndIY) },
	0x7a: func(c *CPU) { biti(c, 7, c.loadIndIY) },
	0x7b: func(c *CPU) { biti(c, 7, c.loadIndIY) },
	0x7c: func(c *CPU) { biti(c, 7, c.loadIndIY) },
	0x7d: func(c *CPU) { biti(c, 7, c.loadIndIY) },
	0x7e: func(c *CPU) { biti(c, 7, c.loadIndIY) },
	0x7f: func(c *CPU) { biti(c, 7, c.loadIndIY) },
	0x80: func(c *CPU) { res(c, 0, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0x81: func(c *CPU) { res(c, 0, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0x82: func(c *CPU) { res(c, 0, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0x83: func(c *CPU) { res(c, 0, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0x84: func(c *CPU) { res(c, 0, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0x85: func(c *CPU) { res(c, 0, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0x86: func(c *CPU) { res(c, 0, c.storeLastInd, c.loadIndIY) },
	0x87: func(c *CPU) { res(c, 0, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0x88: func(c *CPU) { res(c, 1, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0x89: func(c *CPU) { res(c, 1, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0x8a: func(c *CPU) { res(c, 1, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0x8b: func(c *CPU) { res(c, 1, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0x8c: func(c *CPU) { res(c, 1, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0x8d: func(c *CPU) { res(c, 1, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0x8e: func(c *CPU) { res(c, 1, c.storeLastInd, c.loadIndIY) },
	0x8f: func(c *CPU) { res(c, 1, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0x90: func(c *CPU) { res(c, 2, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0x91: func(c *CPU) { res(c, 2, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0x92: func(c *CPU) { res(c, 2, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0x93: func(c *CPU) { res(c, 2, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0x94: func(c *CPU) { res(c, 2, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0x95: func(c *CPU) { res(c, 2, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0x96: func(c *CPU) { res(c, 2, c.storeLastInd, c.loadIndIY) },
	0x97: func(c *CPU) { res(c, 2, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0x98: func(c *CPU) { res(c, 3, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0x99: func(c *CPU) { res(c, 3, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0x9a: func(c *CPU) { res(c, 3, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0x9b: func(c *CPU) { res(c, 3, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0x9c: func(c *CPU) { res(c, 3, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0x9d: func(c *CPU) { res(c, 3, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0x9e: func(c *CPU) { res(c, 3, c.storeLastInd, c.loadIndIY) },
	0x9f: func(c *CPU) { res(c, 3, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0xa0: func(c *CPU) { res(c, 4, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0xa1: func(c *CPU) { res(c, 4, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0xa2: func(c *CPU) { res(c, 4, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0xa3: func(c *CPU) { res(c, 4, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0xa4: func(c *CPU) { res(c, 4, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0xa5: func(c *CPU) { res(c, 4, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0xa6: func(c *CPU) { res(c, 4, c.storeLastInd, c.loadIndIY) },
	0xa7: func(c *CPU) { res(c, 4, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0xa8: func(c *CPU) { res(c, 5, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0xa9: func(c *CPU) { res(c, 5, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0xaa: func(c *CPU) { res(c, 5, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0xab: func(c *CPU) { res(c, 5, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0xac: func(c *CPU) { res(c, 5, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0xad: func(c *CPU) { res(c, 5, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0xae: func(c *CPU) { res(c, 5, c.storeLastInd, c.loadIndIY) },
	0xaf: func(c *CPU) { res(c, 5, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0xb0: func(c *CPU) { res(c, 6, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0xb1: func(c *CPU) { res(c, 6, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0xb2: func(c *CPU) { res(c, 6, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0xb3: func(c *CPU) { res(c, 6, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0xb4: func(c *CPU) { res(c, 6, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0xb5: func(c *CPU) { res(c, 6, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0xb6: func(c *CPU) { res(c, 6, c.storeLastInd, c.loadIndIY) },
	0xb7: func(c *CPU) { res(c, 6, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0xb8: func(c *CPU) { res(c, 7, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0xb9: func(c *CPU) { res(c, 7, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0xba: func(c *CPU) { res(c, 7, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0xbb: func(c *CPU) { res(c, 7, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0xbc: func(c *CPU) { res(c, 7, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0xbd: func(c *CPU) { res(c, 7, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0xbe: func(c *CPU) { res(c, 7, c.storeLastInd, c.loadIndIY) },
	0xbf: func(c *CPU) { res(c, 7, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0xc0: func(c *CPU) { set(c, 0, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0xc1: func(c *CPU) { set(c, 0, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0xc2: func(c *CPU) { set(c, 0, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0xc3: func(c *CPU) { set(c, 0, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0xc4: func(c *CPU) { set(c, 0, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0xc5: func(c *CPU) { set(c, 0, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0xc6: func(c *CPU) { set(c, 0, c.storeLastInd, c.loadIndIY) },
	0xc7: func(c *CPU) { set(c, 0, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0xc8: func(c *CPU) { set(c, 1, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0xc9: func(c *CPU) { set(c, 1, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0xca: func(c *CPU) { set(c, 1, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0xcb: func(c *CPU) { set(c, 1, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0xcc: func(c *CPU) { set(c, 1, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0xcd: func(c *CPU) { set(c, 1, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0xce: func(c *CPU) { set(c, 1, c.storeLastInd, c.loadIndIY) },
	0xcf: func(c *CPU) { set(c, 1, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0xd0: func(c *CPU) { set(c, 2, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0xd1: func(c *CPU) { set(c, 2, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0xd2: func(c *CPU) { set(c, 2, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0xd3: func(c *CPU) { set(c, 2, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0xd4: func(c *CPU) { set(c, 2, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0xd5: func(c *CPU) { set(c, 2, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0xd6: func(c *CPU) { set(c, 2, c.storeLastInd, c.loadIndIY) },
	0xd7: func(c *CPU) { set(c, 2, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0xd8: func(c *CPU) { set(c, 3, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0xd9: func(c *CPU) { set(c, 3, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0xda: func(c *CPU) { set(c, 3, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0xdb: func(c *CPU) { set(c, 3, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0xdc: func(c *CPU) { set(c, 3, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0xdd: func(c *CPU) { set(c, 3, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0xde: func(c *CPU) { set(c, 3, c.storeLastInd, c.loadIndIY) },
	0xdf: func(c *CPU) { set(c, 3, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0xe0: func(c *CPU) { set(c, 4, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0xe1: func(c *CPU) { set(c, 4, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0xe2: func(c *CPU) { set(c, 4, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0xe3: func(c *CPU) { set(c, 4, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0xe4: func(c *CPU) { set(c, 4, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0xe5: func(c *CPU) { set(c, 4, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0xe6: func(c *CPU) { set(c, 4, c.storeLastInd, c.loadIndIY) },
	0xe7: func(c *CPU) { set(c, 4, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0xe8: func(c *CPU) { set(c, 5, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0xe9: func(c *CPU) { set(c, 5, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0xea: func(c *CPU) { set(c, 5, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0xeb: func(c *CPU) { set(c, 5, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0xec: func(c *CPU) { set(c, 5, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0xed: func(c *CPU) { set(c, 5, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0xee: func(c *CPU) { set(c, 5, c.storeLastInd, c.loadIndIY) },
	0xef: func(c *CPU) { set(c, 5, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0xf0: func(c *CPU) { set(c, 6, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0xf1: func(c *CPU) { set(c, 6, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0xf2: func(c *CPU) { set(c, 6, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0xf3: func(c *CPU) { set(c, 6, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0xf4: func(c *CPU) { set(c, 6, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0xf5: func(c *CPU) { set(c, 6, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0xf6: func(c *CPU) { set(c, 6, c.storeLastInd, c.loadIndIY) },
	0xf7: func(c *CPU) { set(c, 6, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
	0xf8: func(c *CPU) { set(c, 7, c.storeB, c.loadIndIY); ld(c, c.storeLastInd, c.loadB) },
	0xf9: func(c *CPU) { set(c, 7, c.storeC, c.loadIndIY); ld(c, c.storeLastInd, c.loadC) },
	0xfa: func(c *CPU) { set(c, 7, c.storeD, c.loadIndIY); ld(c, c.storeLastInd, c.loadD) },
	0xfb: func(c *CPU) { set(c, 7, c.storeE, c.loadIndIY); ld(c, c.storeLastInd, c.loadE) },
	0xfc: func(c *CPU) { set(c, 7, c.storeH, c.loadIndIY); ld(c, c.storeLastInd, c.loadH) },
	0xfd: func(c *CPU) { set(c, 7, c.storeL, c.loadIndIY); ld(c, c.storeLastInd, c.loadL) },
	0xfe: func(c *CPU) { set(c, 7, c.storeLastInd, c.loadIndIY) },
	0xff: func(c *CPU) { set(c, 7, c.storeA, c.loadIndIY); ld(c, c.storeLastInd, c.loadA) },
}
