package m6502

import (
	"fmt"
	"testing"

	"github.com/blackchip-org/retro-cs/mock"
	"github.com/blackchip-org/retro-cs/rcs"
)

func TestDisassembler(t *testing.T) {
	var b = func(values ...int) []uint8 {
		bytes := make([]uint8, 0)
		for _, v := range values {
			bytes = append(bytes, uint8(v))
		}
		return bytes
	}

	var disassemblerTests = []struct {
		bytes []uint8
		want  string
	}{
		{b(0x02, 0x00, 0x00), "$1234:  02        ?02"},

		{b(0x69, 0x56, 0x00), "$1234:  69 56     adc #$56"},
		{b(0x65, 0x56, 0x00), "$1234:  65 56     adc $56"},
		{b(0x75, 0x56, 0x00), "$1234:  75 56     adc $56,x"},
		{b(0x6d, 0x78, 0x56), "$1234:  6d 78 56  adc $5678"},
		{b(0x7d, 0x78, 0x56), "$1234:  7d 78 56  adc $5678,x"},
		{b(0x79, 0x78, 0x56), "$1234:  79 78 56  adc $5678,y"},
		{b(0x61, 0x56, 0x00), "$1234:  61 56     adc ($56,x)"},
		{b(0x71, 0x56, 0x00), "$1234:  71 56     adc ($56),y"},

		{b(0x29, 0x56, 0x00), "$1234:  29 56     and #$56"},
		{b(0x25, 0x56, 0x00), "$1234:  25 56     and $56"},
		{b(0x35, 0x56, 0x00), "$1234:  35 56     and $56,x"},
		{b(0x2d, 0x78, 0x56), "$1234:  2d 78 56  and $5678"},
		{b(0x3d, 0x78, 0x56), "$1234:  3d 78 56  and $5678,x"},
		{b(0x39, 0x78, 0x56), "$1234:  39 78 56  and $5678,y"},
		{b(0x21, 0x56, 0x00), "$1234:  21 56     and ($56,x)"},
		{b(0x31, 0x56, 0x00), "$1234:  31 56     and ($56),y"},

		{b(0x0a, 0x56, 0x00), "$1234:  0a        asl a"},
		{b(0x06, 0x56, 0x00), "$1234:  06 56     asl $56"},
		{b(0x16, 0x56, 0x00), "$1234:  16 56     asl $56,x"},
		{b(0x0e, 0x78, 0x56), "$1234:  0e 78 56  asl $5678"},
		{b(0x1e, 0x78, 0x56), "$1234:  1e 78 56  asl $5678,x"},

		{b(0x24, 0x56, 0x00), "$1234:  24 56     bit $56"},
		{b(0x2c, 0x78, 0x56), "$1234:  2c 78 56  bit $5678"},

		{b(0x10, 0x0a, 0x00), "$1234:  10 0a     bpl $1240"},
		{b(0x10, 0xfa, 0x00), "$1234:  10 fa     bpl $1230"},
		{b(0x30, 0x0a, 0x00), "$1234:  30 0a     bmi $1240"},
		{b(0x50, 0x0a, 0x00), "$1234:  50 0a     bvc $1240"},
		{b(0x70, 0x0a, 0x00), "$1234:  70 0a     bvs $1240"},
		{b(0x90, 0x0a, 0x00), "$1234:  90 0a     bcc $1240"},
		{b(0xb0, 0x0a, 0x00), "$1234:  b0 0a     bcs $1240"},
		{b(0xd0, 0x0a, 0x00), "$1234:  d0 0a     bne $1240"},
		{b(0xf0, 0x0a, 0x00), "$1234:  f0 0a     beq $1240"},

		{b(0x00, 0x00, 0x00), "$1234:  00        brk"},

		{b(0xc9, 0x56, 0x00), "$1234:  c9 56     cmp #$56"},
		{b(0xc5, 0x56, 0x00), "$1234:  c5 56     cmp $56"},
		{b(0xd5, 0x56, 0x00), "$1234:  d5 56     cmp $56,x"},
		{b(0xcd, 0x78, 0x56), "$1234:  cd 78 56  cmp $5678"},
		{b(0xdd, 0x78, 0x56), "$1234:  dd 78 56  cmp $5678,x"},
		{b(0xd9, 0x78, 0x56), "$1234:  d9 78 56  cmp $5678,y"},
		{b(0xc1, 0x56, 0x00), "$1234:  c1 56     cmp ($56,x)"},
		{b(0xd1, 0x56, 0x00), "$1234:  d1 56     cmp ($56),y"},

		{b(0xe0, 0x56, 0x00), "$1234:  e0 56     cpx #$56"},
		{b(0xe4, 0x56, 0x00), "$1234:  e4 56     cpx $56"},
		{b(0xec, 0x78, 0x56), "$1234:  ec 78 56  cpx $5678"},

		{b(0xc0, 0x56, 0x00), "$1234:  c0 56     cpy #$56"},
		{b(0xc4, 0x56, 0x00), "$1234:  c4 56     cpy $56"},
		{b(0xcc, 0x78, 0x56), "$1234:  cc 78 56  cpy $5678"},

		{b(0xc6, 0x56, 0x00), "$1234:  c6 56     dec $56"},
		{b(0xd6, 0x56, 0x00), "$1234:  d6 56     dec $56,x"},
		{b(0xce, 0x78, 0x56), "$1234:  ce 78 56  dec $5678"},
		{b(0xde, 0x78, 0x56), "$1234:  de 78 56  dec $5678,x"},

		{b(0x49, 0x56, 0x00), "$1234:  49 56     eor #$56"},
		{b(0x45, 0x56, 0x00), "$1234:  45 56     eor $56"},
		{b(0x55, 0x56, 0x00), "$1234:  55 56     eor $56,x"},
		{b(0x4d, 0x78, 0x56), "$1234:  4d 78 56  eor $5678"},
		{b(0x5d, 0x78, 0x56), "$1234:  5d 78 56  eor $5678,x"},
		{b(0x59, 0x78, 0x56), "$1234:  59 78 56  eor $5678,y"},
		{b(0x41, 0x56, 0x00), "$1234:  41 56     eor ($56,x)"},
		{b(0x51, 0x56, 0x00), "$1234:  51 56     eor ($56),y"},

		{b(0x18, 0x00, 0x00), "$1234:  18        clc"},
		{b(0x38, 0x00, 0x00), "$1234:  38        sec"},
		{b(0x58, 0x00, 0x00), "$1234:  58        cli"},
		{b(0x78, 0x00, 0x00), "$1234:  78        sei"},
		{b(0xb8, 0x00, 0x00), "$1234:  b8        clv"},
		{b(0xd8, 0x00, 0x00), "$1234:  d8        cld"},
		{b(0xf8, 0x00, 0x00), "$1234:  f8        sed"},

		{b(0xe6, 0x56, 0x00), "$1234:  e6 56     inc $56"},
		{b(0xf6, 0x56, 0x00), "$1234:  f6 56     inc $56,x"},
		{b(0xee, 0x78, 0x56), "$1234:  ee 78 56  inc $5678"},
		{b(0xfe, 0x78, 0x56), "$1234:  fe 78 56  inc $5678,x"},

		{b(0x4c, 0x78, 0x56), "$1234:  4c 78 56  jmp $5678"},
		{b(0x6c, 0x78, 0x56), "$1234:  6c 78 56  jmp ($5678)"},

		{b(0x20, 0x78, 0x56), "$1234:  20 78 56  jsr $5678"},

		{b(0xa9, 0x56, 0x00), "$1234:  a9 56     lda #$56"},
		{b(0xa5, 0x56, 0x00), "$1234:  a5 56     lda $56"},
		{b(0xb5, 0x56, 0x00), "$1234:  b5 56     lda $56,x"},
		{b(0xad, 0x78, 0x56), "$1234:  ad 78 56  lda $5678"},
		{b(0xbd, 0x78, 0x56), "$1234:  bd 78 56  lda $5678,x"},
		{b(0xb9, 0x78, 0x56), "$1234:  b9 78 56  lda $5678,y"},
		{b(0xa1, 0x56, 0x00), "$1234:  a1 56     lda ($56,x)"},
		{b(0xb1, 0x56, 0x00), "$1234:  b1 56     lda ($56),y"},

		{b(0xa2, 0x56, 0x00), "$1234:  a2 56     ldx #$56"},
		{b(0xa6, 0x56, 0x00), "$1234:  a6 56     ldx $56"},
		{b(0xb6, 0x56, 0x00), "$1234:  b6 56     ldx $56,y"},
		{b(0xae, 0x78, 0x56), "$1234:  ae 78 56  ldx $5678"},
		{b(0xbe, 0x78, 0x56), "$1234:  be 78 56  ldx $5678,y"},

		{b(0xa0, 0x56, 0x00), "$1234:  a0 56     ldy #$56"},
		{b(0xa4, 0x56, 0x00), "$1234:  a4 56     ldy $56"},
		{b(0xb4, 0x56, 0x00), "$1234:  b4 56     ldy $56,x"},
		{b(0xac, 0x78, 0x56), "$1234:  ac 78 56  ldy $5678"},
		{b(0xbc, 0x78, 0x56), "$1234:  bc 78 56  ldy $5678,x"},

		{b(0x4a, 0x56, 0x00), "$1234:  4a        lsr a"},
		{b(0x46, 0x56, 0x00), "$1234:  46 56     lsr $56"},
		{b(0x56, 0x56, 0x00), "$1234:  56 56     lsr $56,x"},
		{b(0x4e, 0x78, 0x56), "$1234:  4e 78 56  lsr $5678"},
		{b(0x5e, 0x78, 0x56), "$1234:  5e 78 56  lsr $5678,x"},

		{b(0xea, 0x00, 0x00), "$1234:  ea        nop"},

		{b(0x09, 0x56, 0x00), "$1234:  09 56     ora #$56"},
		{b(0x05, 0x56, 0x00), "$1234:  05 56     ora $56"},
		{b(0x15, 0x56, 0x00), "$1234:  15 56     ora $56,x"},
		{b(0x0d, 0x78, 0x56), "$1234:  0d 78 56  ora $5678"},
		{b(0x1d, 0x78, 0x56), "$1234:  1d 78 56  ora $5678,x"},
		{b(0x19, 0x78, 0x56), "$1234:  19 78 56  ora $5678,y"},
		{b(0x01, 0x56, 0x00), "$1234:  01 56     ora ($56,x)"},
		{b(0x11, 0x56, 0x00), "$1234:  11 56     ora ($56),y"},

		{b(0xaa, 0x00, 0x00), "$1234:  aa        tax"},
		{b(0x8a, 0x00, 0x00), "$1234:  8a        txa"},
		{b(0xca, 0x00, 0x00), "$1234:  ca        dex"},
		{b(0xe8, 0x00, 0x00), "$1234:  e8        inx"},
		{b(0xa8, 0x00, 0x00), "$1234:  a8        tay"},
		{b(0x98, 0x00, 0x00), "$1234:  98        tya"},
		{b(0x88, 0x00, 0x00), "$1234:  88        dey"},
		{b(0xc8, 0x00, 0x00), "$1234:  c8        iny"},

		{b(0x2a, 0x56, 0x00), "$1234:  2a        rol a"},
		{b(0x26, 0x56, 0x00), "$1234:  26 56     rol $56"},
		{b(0x36, 0x56, 0x00), "$1234:  36 56     rol $56,x"},
		{b(0x2e, 0x78, 0x56), "$1234:  2e 78 56  rol $5678"},
		{b(0x3e, 0x78, 0x56), "$1234:  3e 78 56  rol $5678,x"},

		{b(0x6a, 0x56, 0x00), "$1234:  6a        ror a"},
		{b(0x66, 0x56, 0x00), "$1234:  66 56     ror $56"},
		{b(0x76, 0x56, 0x00), "$1234:  76 56     ror $56,x"},
		{b(0x6e, 0x78, 0x56), "$1234:  6e 78 56  ror $5678"},
		{b(0x7e, 0x78, 0x56), "$1234:  7e 78 56  ror $5678,x"},

		{b(0x40, 0x00, 0x00), "$1234:  40        rti"},

		{b(0x60, 0x00, 0x00), "$1234:  60        rts"},

		{b(0xe9, 0x56, 0x00), "$1234:  e9 56     sbc #$56"},
		{b(0xe5, 0x56, 0x00), "$1234:  e5 56     sbc $56"},
		{b(0xf5, 0x56, 0x00), "$1234:  f5 56     sbc $56,x"},
		{b(0xed, 0x78, 0x56), "$1234:  ed 78 56  sbc $5678"},
		{b(0xfd, 0x78, 0x56), "$1234:  fd 78 56  sbc $5678,x"},
		{b(0xf9, 0x78, 0x56), "$1234:  f9 78 56  sbc $5678,y"},
		{b(0xe1, 0x56, 0x00), "$1234:  e1 56     sbc ($56,x)"},
		{b(0xf1, 0x56, 0x00), "$1234:  f1 56     sbc ($56),y"},

		{b(0x85, 0x56, 0x00), "$1234:  85 56     sta $56"},
		{b(0x95, 0x56, 0x00), "$1234:  95 56     sta $56,x"},
		{b(0x8d, 0x78, 0x56), "$1234:  8d 78 56  sta $5678"},
		{b(0x9d, 0x78, 0x56), "$1234:  9d 78 56  sta $5678,x"},
		{b(0x99, 0x78, 0x56), "$1234:  99 78 56  sta $5678,y"},
		{b(0x81, 0x56, 0x00), "$1234:  81 56     sta ($56,x)"},
		{b(0x91, 0x56, 0x00), "$1234:  91 56     sta ($56),y"},

		{b(0x9a, 0x00, 0x00), "$1234:  9a        txs"},
		{b(0xba, 0x00, 0x00), "$1234:  ba        tsx"},
		{b(0x48, 0x00, 0x00), "$1234:  48        pha"},
		{b(0x68, 0x00, 0x00), "$1234:  68        pla"},
		{b(0x08, 0x00, 0x00), "$1234:  08        php"},
		{b(0x28, 0x00, 0x00), "$1234:  28        plp"},

		{b(0x86, 0x56, 0x00), "$1234:  86 56     stx $56"},
		{b(0x96, 0x56, 0x00), "$1234:  96 56     stx $56,y"},
		{b(0x8e, 0x78, 0x56), "$1234:  8e 78 56  stx $5678"},

		{b(0x84, 0x56, 0x00), "$1234:  84 56     sty $56"},
		{b(0x94, 0x56, 0x00), "$1234:  94 56     sty $56,x"},
		{b(0x8c, 0x78, 0x56), "$1234:  8c 78 56  sty $5678"},
	}

	for _, test := range disassemblerTests {
		testName := fmt.Sprintf("opcode $%02x", test.bytes[0])
		t.Run(testName, func(t *testing.T) {
			mock.ResetMemory()
			mem := mock.TestMemory
			mem.WriteN(0x1234, test.bytes...)
			d := rcs.NewDisassembler(mem, Reader, Formatter())
			d.SetPC(0x1234)
			have := d.Next()
			if test.want != have {
				t.Errorf("\n want: %v \n have: %v", test.want, have)
			}
		})
	}
}
